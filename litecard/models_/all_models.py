# generated by datamodel-codegen:
#   filename:  https://bff-api.enterprise.litecard.io/api/v1/docs
#   timestamp: 2025-07-25T07:05:12+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, EmailStr, Extra, Field, confloat, conint, constr


class AggregatedBillingStatistics(BaseModel):
    date: str = Field(..., example='2021-11-09T00:00:00.000Z')
    members: float = Field(..., example=422)
    signups: float = Field(..., example=300)
    coupons: float = Field(..., example=56)


class AggregatedNotificationsStatistics(BaseModel):
    date: Optional[str] = Field(None, example='2021-11-09T00:00:00.000Z')
    errorAPN: Optional[float] = Field(None, example=0)
    errorEmail: Optional[float] = Field(None, example=0)
    errorSMS: Optional[float] = Field(None, example=0)
    queuedAPN: Optional[float] = Field(None, example=0)
    queuedEmail: Optional[float] = Field(None, example=0)
    queuedSMS: Optional[float] = Field(None, example=0)
    sentAPN: Optional[float] = Field(None, example=0)
    sentEmail: Optional[float] = Field(None, example=0)
    sentSMS: Optional[float] = Field(None, example=0)


class Templates(BaseModel):
    total: Optional[float] = Field(
        None, description='Total number of scans on a given timestamp for this template', example=0
    )


class AggregatedScansStatistics(BaseModel):
    date: Optional[str] = Field(None, example='2021-11-09T00:00:00.000Z')
    templates: Optional[List[Dict[str, Templates]]] = None
    total: Optional[float] = Field(
        None, description='Total number of scans on a given timestamp', example=0
    )


class QueryParameters(BaseModel):
    startDateTime: Optional[str] = Field(None, example='2020-12-01')
    endDateTime: Optional[str] = Field(None, example='2020-12-01')


class Results(BaseModel):
    businessId: str = Field(..., example='litecard')
    queryParameters: QueryParameters
    numResults: float = Field(..., example=8)
    analytics: List[AggregatedBillingStatistics]


class AnalyticsBillingResultsSchema(BaseModel):
    results: Results


class Results1(BaseModel):
    businessId: Optional[str] = Field(None, example='litecard')
    queryParameters: Optional[QueryParameters] = None
    numResults: Optional[float] = Field(None, example=8)
    analytics: Optional[List[AggregatedNotificationsStatistics]] = None


class AnalyticsNotificationsResultsSchema(BaseModel):
    results: Optional[Results1] = None


class Results2(BaseModel):
    businessId: Optional[str] = Field(None, example='litecard')
    queryParameters: Optional[QueryParameters] = None
    numResults: Optional[float] = Field(None, example=8)
    analytics: Optional[List[AggregatedScansStatistics]] = None


class AnalyticsScansResultsSchema(BaseModel):
    results: Optional[Results2] = None


class BaseCardPayload(BaseModel):
    class Config:
        extra = Extra.allow

    email: Optional[str] = Field(
        None, description='Example field for email address', example='john@litecard.com.au'
    )
    phone: Optional[str] = Field(
        None, description='Users mobile number for text notifications', example='+61401234567'
    )
    exampleProperty: Optional[str] = Field(
        None, description='Example card property, properties are predefined in the card template'
    )


class DataFields(BaseModel):
    exampleDataField: Optional[str] = Field(
        None, description='Example Value', example='example value'
    )
    fullName: Optional[str] = Field(
        None, description='Full name of owner of card', example='John Doe'
    )


class Status(Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'
    DELETED = 'DELETED'
    RESERVED = 'RESERVED'
    ERROR = 'ERROR'


class CardOwnerCopy(BaseModel):
    id: Optional[str] = Field(
        None, description='Unique identifier for the card owner', example='JUJCSVGnLihP6xcTRElpJ'
    )
    businessId: Optional[str] = Field(
        None,
        description='Identifier for the business associated with the card owner',
        example='LgAcJKiMP5qJf8mKv9a9S',
    )
    name: Optional[str] = Field(None, description='Full name of the card owner', example='John Doe')
    membershipNumber: Optional[str] = Field(
        None, description='Membership number associated with the card', example='M123456789'
    )


class Card(BaseModel):
    id: Optional[str] = Field(None, description='ID of the Pass', example='7048582966')
    downloadId: Optional[str] = Field(
        None, description='DownloadId used for landing page', example='V1StGXR8_Z5jdHi6B-myT'
    )
    appleLink: Optional[str] = Field(
        None,
        description='Url for the apple pass',
        example='https://litecard-demo-pkpass.s3-ap-southeast-2.amazonaws.com/coldbrew.pkpass',
    )
    businessId: Optional[str] = Field(None, description='ID of the Business', example='business123')
    userType: Optional[str] = Field(None, description='Type of User', example='employee')
    createdAt: Optional[str] = Field(
        None, description='Date Time card was created', example='2021-11-05T04:25:42.676Z'
    )
    googlePassId: Optional[str] = Field(None, description='Id of google pass', example='1231244')
    authToken: Optional[str] = Field(
        None, description='Internal Use Only. Apple Device Auth Token', example='dscxdsf234'
    )
    passType: Optional[str] = Field(None, description='Mobile wallet pass type', example='VISIT')
    googleLink: Optional[str] = Field(
        None, description='Url of google pass', example='https://pay.google.com...'
    )
    samsungLink: Optional[str] = Field(
        None,
        description='Url of samsung pass',
        example='https://a.swallet.link/atw/656147182764415319#Clip?pdata=sIgHCzIwM9g',
    )
    templateId: str = Field(
        ..., description='Id for the template used to create the card', example='test_business'
    )
    dataFields: Optional[DataFields] = None
    formId: str = Field(..., description='Id for field input form', example='00000001')
    updatedAt: Optional[str] = Field(None, description='', example='2021-11-05T04:25:42.676Z')
    pkPassId: Optional[str] = Field(
        None, description='Id of Apple Pass', example='pass.au.com.litecard.dev.q124234'
    )
    barcodeValue: Optional[str] = Field(
        None, description='what the barcode value is', example='5434435'
    )
    appleStatus: Optional[str] = Field(
        None, description='Status of card inside of Apple Wallet', example='ACTIVE'
    )
    googleStatus: Optional[str] = Field(
        None, description='Status of card inside of Google Wallet', example='INACTIVE'
    )
    cardOwnerId: Optional[str] = Field(None, description='Id of the card owner', example='asb123')
    status: Optional[Status] = Field(
        None, description='Activation Status of the card', example='INACTIVE'
    )
    expiry: Optional[str] = Field(
        None, description='Expiry of card, in ISO-8601 format', example='2021-08-11T03:15:56.860Z'
    )
    barcodeLink: Optional[str] = Field(
        None, description='Link to the barcode image', example='https://example.com/blah.png'
    )
    cardOwnerCopy: Optional[CardOwnerCopy] = Field(
        None, description="A copy of the card owner's information"
    )
    disableQR: Optional[bool] = Field(
        None, description='Disable QR code on Welcome Page', example=True
    )
    stripeCustomerId: Optional[str] = Field(
        None, description='stripeCustomerId for subscription passes', example='str_123'
    )
    disableDownload: Optional[bool] = Field(
        None,
        description='Disable download link if pass is already activated. Default: false',
        example=True,
    )


class CardMappingPayload(BaseModel):
    class Config:
        extra = Extra.allow

    formId: Optional[str] = Field(
        None,
        description='Id to define the schema for field inputs used to create/update the card.',
        example='kSwoChd',
    )
    templateId: Optional[str] = Field(
        None,
        description='Id for the apple/google pass template used to create the card.',
        example='test_business',
    )
    cardPayload: Optional[BaseCardPayload] = None


class CardOwner(BaseModel):
    id: Optional[str] = Field(
        None, description='Unique identifier for the card owner', example='JUJCSVGnLihP6xcTRElpJ'
    )
    businessId: Optional[str] = Field(
        None,
        description='Identifier for the business associated with the card owner',
        example='L3ZrB748fLxlFD8ZjFVgX',
    )
    phone: Optional[str] = Field(
        None, description='Phone number of the card owner', example='+61402221795'
    )
    email: Optional[EmailStr] = Field(
        None, description='Email address of the card owner', example='dzuy.pham+test@corplite.com'
    )
    accountName: Optional[str] = Field(None, description='Owner of the card', example='Ankus Fang')
    userType: Optional[str] = Field(None, description='User Type', example='basic')
    createdAt: Optional[datetime] = Field(
        None,
        description='Timestamp of when the card owner record was created',
        example='2023-10-19T09:05:52.771Z',
    )
    firstName: Optional[str] = Field(
        None, description='First name of the card owner', example='Dzuy'
    )
    formId: Optional[str] = Field(
        None,
        description='Identifier for the form associated with the card owner',
        example='TmtB-B7gadaNbH8aF7Pan',
    )
    lastName: Optional[str] = Field(None, description='Last name of the card owner', example='Pham')
    state: Optional[str] = Field(
        None, description='State of residence of the card owner', example='VIC'
    )
    updatedAt: Optional[datetime] = Field(
        None,
        description="Timestamp of the last update to the card owner's record",
        example='2023-10-19T09:05:52.771Z',
    )
    version: Optional[int] = Field(
        None, description="Version number of the card owner's record", example=1
    )


class CardOwnerRequestBody(BaseModel):
    class Config:
        extra = Extra.allow

    firstName: Optional[str] = Field(None, description='First name of the user', example='John')
    lastName: Optional[str] = Field(None, description='Last name of the user', example='Doe')
    email: Optional[str] = Field(
        None, description='Email address of the user', example='john@litecard.com.au'
    )
    phone: Optional[str] = Field(None, description='Phone number of the user', example='1234567890')
    state: Optional[str] = Field(None, description='State of Residence', example='VIC')
    formId: Optional[str] = Field(
        None,
        description='Id to define the schema for field inputs used to create/update the card..',
        example='kSwoChd',
    )
    businessId: Optional[str] = Field(
        None, description='Business Id of the sign up form', example='sample_dev_company'
    )


class CardOwnersScanRequestBody(BaseModel):
    field: str = Field(..., description='Attribute name for table filtering', example='businessId')
    query: str = Field(..., description='Attribute value for table filtering', example='abc123')


class Certificate(BaseModel):
    apple: Optional[str] = Field(None, description='Apple Certificate Id', example='st3dfdAsaaf')
    google: Optional[str] = Field(None, description='Google Certificate Id', example='z2pkdjkASg3')


class Redemption(BaseModel):
    buttonText: Optional[str] = Field(
        None, description='Button text of the coupon', example='Redeem Now (Bar Staff Only)'
    )
    instructions: Optional[str] = Field(
        None,
        description='Instructions of the coupon',
        example='Show this to the bar staff to redeem',
    )


class Coupon(BaseModel):
    id: Optional[str] = Field(None, description='Id of the coupon', example='-jJWhjZ1a')
    name: Optional[str] = Field(
        None, description='Name of the coupon', example='Grab your first coupon here'
    )
    description: Optional[str] = Field(
        None,
        description='description of the coupon',
        example='Promotions are only for the new registered card owners',
    )
    discountValue: Optional[float] = Field(None, description='Coupon discount value', example='100')
    expiryDate: Optional[str] = Field(
        None, description='Expire date of the coupon', example='2021-08-15T03:15:56.860Z'
    )
    redemption: Optional[Redemption] = None
    createdAt: Optional[str] = Field(
        None, description='Create date of the coupon', example='2021-08-11T03:15:56.860Z'
    )
    updatedAt: Optional[str] = Field(
        None, description='Update date of the coupon', example='2021-08-1T03:15:56.860Z'
    )
    expiryEnabled: Optional[bool] = Field(
        None, description='Expire status of the coupon', example='true'
    )
    createdBy: Optional[str] = Field(
        None,
        description='Auth0 Id of the user who created this instance',
        example='V1StGXR8_Z5jdHi6B-myT',
    )
    status: Optional[str] = Field(None, description='Redeem status of the coupon', example='ISSUED')


class CreateCouponResponseSchema(BaseModel):
    message: Optional[str] = None
    success: Optional[bool] = Field(
        None, description='Returns whether the request was successful', example=True
    )


class CreateProfileBody(BaseModel):
    businessName: Optional[str] = Field(None, description='Business name', example='Cryo gym')
    subBusinessName: Optional[str] = Field(
        None, description='Name to show on sub business selection', example='Cryo gym - Sub 1'
    )
    email: Optional[str] = Field(None, description='Business email', example='Ankus Fang')
    postCode: Optional[str] = Field(None, description='Business postcode', example='CryoGym')
    state: Optional[str] = Field(
        None, description='Business state', example='AHVW1qv4I_Teqdu4VjwMA'
    )
    logoImage: Optional[str] = Field(
        None, description='Business logo image file', example='CryoGym'
    )
    templateCount: Optional[float] = Field(
        None, description='Current total number of templates a user has.', example='3'
    )
    templateLimit: Optional[float] = Field(
        None,
        description='Maximum amount of templates this user can have. A templateLimit of -1 means the user can have unlimited templates.',
        example='12',
    )
    createdAt: Optional[str] = Field(
        None,
        description='Date when pass was first created, in ISO-8601 format',
        example='2021-08-11T03:15:56.860Z',
    )
    updatedAt: Optional[str] = Field(
        None,
        description='Date when pass was last updated, in ISO-8601 format',
        example='2021-08-1T03:15:56.860Z',
    )
    isMasterBusiness: Optional[bool] = Field(
        None, description='Is the account a master account', example=True
    )
    masterBusinessId: Optional[str] = Field(
        None, description='Master business id', example='master-business-id'
    )


class CreateScanBody(BaseModel):
    id: str = Field(..., description='Id of the scan', example='2fhajJWhjZ1a')
    createdBy: str = Field(..., description='Auth0 ID of Creator', example='Ankus Fang')
    deviceId: Optional[str] = Field(
        None, description='Id of the USB Scanner used', example='CryoGym'
    )
    deviceName: Optional[str] = Field(
        None, description='Name of the USB Scanner', example='AHVW1qv4I_Teqdu4VjwMA'
    )
    location: Optional[str] = Field(
        None, description='Location of the USB Scanner', example='eqdu4VjAHVW1qv4I_TwMA'
    )
    createdAt: Optional[str] = Field(
        None,
        description='Date when pass was first created, in ISO-8601 format',
        example='2021-08-11T03:15:56.860Z',
    )
    updatedAt: Optional[str] = Field(
        None,
        description='Date when pass was last updated, in ISO-8601 format',
        example='2021-08-1T03:15:56.860Z',
    )
    businessId: str = Field(..., description='Business Name', example='CryoGym')


class CustomFormDesignBackgroundStyles(BaseModel):
    colour: Optional[str] = Field('#FFFFFF', description='Background color', example='lightgrey')
    textColour: Optional[str] = Field('#000000', description='Text color', example='#000000')


class CustomFormDesignCommonStyles(BaseModel):
    inputBgColour: Optional[str] = Field(
        '#FFFFFF', description='Background color for input fields', example='#FFFFFF'
    )
    inputTextColour: Optional[str] = Field(
        '#000000', description='Text color for input fields', example='#000000'
    )
    inputBorderColour: Optional[str] = Field(
        '#000000', description='Border color for input fields', example='#000000'
    )
    iconBgColour: Optional[str] = Field(
        '#000000', description='Background color for icons', example='#000000'
    )
    iconColour: Optional[str] = Field('#FFFFFF', description='Color for icons', example='#FFFFFF')
    linkColour: Optional[str] = Field(
        '#1677ff', description='Colour of the links', example='#1677ff'
    )
    activeInputBgColour: Optional[str] = Field(
        None, description='Background color for active input fields', example='#F0F0F0'
    )
    activeInputTextColour: Optional[str] = Field(
        None, description='Text color for active input fields', example='#333333'
    )
    activeLinkColour: Optional[str] = Field(
        None, description='Colour of active links', example='#0056b3'
    )
    disabledInputBgColour: Optional[str] = Field(
        None, description='Background color for disabled input fields', example='#E0E0E0'
    )
    disabledInputTextColour: Optional[str] = Field(
        None, description='Text color for disabled input fields', example='#999999'
    )
    errorTextColour: Optional[str] = Field('red', description='Colour of error text', example='red')
    leftSectionFontFamily: Optional[str] = Field(
        None, description='Font family for the left section', example='Arial'
    )
    headerFontFamily: Optional[str] = Field(
        None, description='Font family for the header', example='Arial'
    )


class CustomFormDesignFooterSection(BaseModel):
    content1: Optional[str] = Field(None, description='Footer header text', example='Footer Header')
    content2: Optional[str] = Field(
        None, description='Content for the footer', example='This is the footer content.'
    )
    image: Optional[str] = Field(
        None, description='URL of the footer image', example='/path/to/footer-image.png'
    )
    textColour: Optional[str] = Field(None, description='Colour of the text', example='#000000')


class Styles(BaseModel):
    logoFullWith: Optional[bool] = Field(
        True, description='Flag to indicate if the logo should use full width'
    )


class CustomFormDesignLeftSection(BaseModel):
    header: Optional[str] = Field(
        None, description='Header text for the left section', example='Welcome to the form'
    )
    headerTextColour: Optional[str] = Field(
        '#000000', description='Colour of the header text', example='#000000'
    )
    headerLogo: Optional[str] = Field(
        None, description='URL of the header logo image', example='/path/to/logo.png'
    )
    backgroundImage: Optional[str] = Field(
        None, description='URL of the background image', example='/path/to/logo.png'
    )
    footerHeader: Optional[str] = Field(
        None, description='Footer header text', example='Footer Header'
    )
    footerContent: Optional[str] = Field(
        None, description='Content for the footer', example='This is the footer content.'
    )
    footerImage: Optional[str] = Field(
        None, description='URL of the footer image', example='/path/to/footer-image.png'
    )
    footerLargeImage: Optional[str] = Field(
        None, description='URL of the footer image', example='/path/to/footer-image.png'
    )
    styles: Optional[Styles] = Field(None, description='Styling options for the left section')
    headerClassName: Optional[str] = Field(
        None, description='Custom CSS class for the header', example='form-header'
    )


class CustomFormDesignRightSection(BaseModel):
    headerLogo: Optional[str] = Field(
        None, description='URL of the header logo image', example='/path/to/right-logo.png'
    )
    header: Optional[str] = Field(
        None, description='Header text for the right section', example='Sign up now!'
    )
    content: Optional[str] = Field(
        None, description='Content for the right section', example='Please fill in your details'
    )
    instructions: Optional[str] = Field(
        None,
        description='Content for the instructions section',
        example='Please fill in your details',
    )
    headerTextColour: Optional[str] = Field(
        '#000000', description='Colour of the header text', example='#000000'
    )
    submitButtonColour: Optional[str] = Field(
        '#FFFFFF', description='Colour of the submit button', example='#FFFFFF'
    )
    submitButtonTextColour: Optional[str] = Field(
        '#000000', description='Colour of the submit button text', example='#000000'
    )
    submitButtonText: Optional[str] = Field(
        'Send', description='Text displayed on the submit button', example='Send'
    )
    submitBorderColour: Optional[str] = Field(
        'transparent', description='Border color of the submit button', example='transparent'
    )
    headerClassName: Optional[str] = Field(
        None, description='Custom CSS class for the header', example='form-header'
    )
    formStyles: Optional[Dict[str, Any]] = Field(None, description='Custom styles for the form')


class CustomFormDesignSchema(BaseModel):
    designType: Optional[float] = Field(1, description='design type id')
    isPublic: Optional[bool] = Field(False, description='Flag to indicate if the form is public')
    documentTitle: Optional[str] = Field(
        None, description='Title of the document', example='Please enter your title'
    )
    faviconPath: Optional[str] = Field(
        None, description='Path to the favicon image', example='/path/to/favicon.ico'
    )
    facebookURL: Optional[str] = Field(
        None, description='URL to the Facebook page', example='https://www.facebook.com/'
    )
    socialLinksText: Optional[str] = Field(
        None, description='Text for the social links section', example='SHARE'
    )
    instagramURL: Optional[str] = Field(
        None, description='URL to the Instagram page', example='https://www.instagram.com/'
    )
    redirectionURL: Optional[str] = Field(
        None, description='URL to redirect to after sign up', example='https://www.example.com'
    )
    termsAndConditionsURL: Optional[str] = Field(
        None, description='URL to the terms and conditions', example='https://www.example.com/terms'
    )
    termsLinkText: Optional[str] = Field(
        None, description='Text for the terms and conditions link', example='Terms and Conditions'
    )
    homePageURL: Optional[str] = Field(
        None, description='URL to the home page', example='https://www.example.com'
    )
    successSubmissionMessage: Optional[str] = Field(
        None,
        description='Message displayed on successful form submission',
        example='Thank you for signing up!',
    )
    disableSuccessSubmissionMessage: Optional[bool] = Field(
        None, description='Flag to disable the success submission message', example=False
    )
    backgroundStyles: CustomFormDesignBackgroundStyles
    leftSection: CustomFormDesignLeftSection
    rightSection: Optional[CustomFormDesignRightSection] = None
    commonStyles: Optional[CustomFormDesignCommonStyles] = None
    footerSection: Optional[CustomFormDesignFooterSection] = None


class Method(Enum):
    POST = 'POST'


class AuthType(Enum):
    API_KEY = 'API_KEY'


class AuthConfig(BaseModel):
    securityHeader: Optional[str] = Field(
        None,
        description='The header to use in the request when entering the key',
        example='X-API-KEY',
    )


class Event(Enum):
    PASS_DOWNLOAD = 'PASS_DOWNLOAD'
    PASS_REMOVE = 'PASS_REMOVE'
    REGISTER_WEBHOOK = 'REGISTER_WEBHOOK'


class CustomerWebhook(BaseModel):
    webhookUrl: Optional[str] = Field(
        None,
        description='The endpoint for Litecard to send the download data',
        example='https://example.com/webhook',
    )
    method: Optional[Method] = Field(None, description='Method to use', example='POST')
    authType: Optional[AuthType] = Field(
        None, description='The type of Auth to use for the webhook'
    )
    authConfig: Optional[AuthConfig] = Field(
        None, description='The properties we need to use for Authentication'
    )
    events: Optional[List[Event]] = Field(None, description='Types of events the webhook supports')


class DateTimeStyle(Enum):
    NOT_USED = 'NOT_USED'
    NONE = 'NONE'
    SHORT = 'SHORT'
    MEDIUM = 'MEDIUM'
    LONG = 'LONG'
    FULL = 'FULL'


class DeleteCardOwnerResponseSchema(BaseModel):
    message: Optional[str] = None
    success: Optional[bool] = Field(
        None, description='Returns whether the request was successful', example=True
    )


class DeleteCouponResponseSchema(BaseModel):
    message: Optional[str] = None
    success: Optional[bool] = Field(
        None, description='Returns whether the request was successful', example=True
    )


class DownloadCsvResponse(BaseModel):
    signedUrl: Optional[str] = Field(
        None, description='url for downloading the csv', example='https://lc-business'
    )
    expiryTime: Optional[str] = Field(
        None, description='Expiry time for the url', example='2022-02-04T06:22:37.773Z'
    )
    startDateTime: Optional[str] = Field(
        None,
        description='Start date time of the exporting data',
        example='2022-02-04T06:22:37.773Z',
    )
    endDateTime: Optional[str] = Field(
        None, description='End date time of the exporting data', example='2022-02-04T06:22:37.773Z'
    )


class ErrorResponse(BaseModel):
    errorCode: Optional[str] = None


class DynamicColumn(BaseModel):
    label: str = Field(..., description='The column name of the table ', example='Last Name')
    value: str = Field(..., description='The dataIndex of the table', example='firstName')


class TableName(Enum):
    SCAN_TABLE = 'SCAN_TABLE'
    MEMBER_TABLE = 'MEMBER_TABLE'
    CARD_TABLE = 'CARD_TABLE'


class ExportCsvRequestBody(BaseModel):
    dynamicColumns: Optional[List[DynamicColumn]] = None
    tableName: Optional[TableName] = Field(
        None, description='The name of the table', example='SCAN_TABLE'
    )
    startDateTime: Optional[str] = Field(
        None, description='StartDateTime of the exporting data', example='2022-02-04T06:22:37.773Z'
    )
    endDateTime: Optional[str] = Field(
        None, description='EndDateTime of the exporting data', example='2022-02-04T06:22:37.773Z'
    )


class Style(BaseModel):
    bgPrimary: Optional[str] = Field(
        None, description='Primary colour for the form background', example='#1890ff'
    )
    bgSecondary: Optional[str] = Field(
        None, description='Secondary colour for the form background', example='#1890ff'
    )
    btnPrimary: Optional[str] = Field(
        None, description='Secondary colour for the button', example='#1890ff'
    )
    btnSecondary: Optional[str] = Field(
        None, description='Secondary colour for the button', example='#1890ff'
    )
    label: Optional[str] = Field(
        None, description='Label colour for Apple Passes', example='#f1f0f2'
    )


class MailchimpSettings(BaseModel):
    enabled: Optional[bool] = Field(
        None, description='Enable mailchimp invitation emails', example=False
    )
    eventName: Optional[str] = Field(
        None, description='journey to trigger in mailchimp', example='my_event'
    )
    mergeFieldMapping: Optional[Dict[str, Any]] = Field(
        None, description='Additional merge field mappings to card data'
    )


class FormFieldUsageEnum(Enum):
    PRIVATE = 'PRIVATE'
    PUBLIC = 'PUBLIC'
    EXTERNAL = 'EXTERNAL'


class FormFieldUsage(BaseModel):
    __root__: List[FormFieldUsageEnum] = Field(..., description='Usage of the form field')


class Type(Enum):
    text = 'text'
    radio = 'radio'
    select = 'select'
    phone = 'phone'
    textArea = 'textArea'
    number = 'number'


class Option(BaseModel):
    title: Optional[str] = Field(None, description='Label for the option', example='Casual')
    value: Optional[str] = Field(None, description='Value for the option', example='templateId')


class FormFields(BaseModel):
    enabled: bool
    mappingType: str
    type: Type
    format: Optional[str] = Field(
        None, description='Format of the field', example='DD/MM/YYYY for date inputs'
    )
    label: str
    helpText: Optional[str] = Field(
        None,
        description='Help text to be displayed next to the field label',
        example='Date the member joined',
    )
    name: str
    rules: List[str]
    usage: Optional[FormFieldUsage] = None
    value: Optional[Union[str, float]] = None
    placeholder: Optional[str] = None
    options: Optional[List[Option]] = Field(None, description='List of options for drop down list')


class Status1(Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'
    DELETED = 'DELETED'


class FormRequest(BaseModel):
    fields: Optional[List[FormFields]] = None
    formName: Optional[str] = Field(None, description='Name of the form', example='test form')
    createdBy: Optional[str] = Field(
        None,
        description='Auth0 Id of the user who created this instance',
        example='V1StGXR8_Z5jdHi6B-myT',
    )
    businessId: Optional[str] = Field(
        None, description='Id for the Business that this entity belongs to', example='LiteCard'
    )
    userType: Optional[str] = Field(None, description='user type', example='staff')
    ttlEnabled: Optional[bool] = Field(None, description='Enable ttl', example='true')
    ttlPeriod: Optional[float] = Field(None, description='Set ttl period', example='10')
    passwordEnabled: Optional[bool] = Field(False, description='Enable password', example='true')
    logo: Optional[str] = Field(
        None, description='logo image link url', example='https://assets-dev.litecard.io/logo.png'
    )
    title: Optional[str] = Field(None, description='Title of the form', example='LiteCard')
    description: Optional[str] = Field(
        None, description='Description of the form', example='Make your move with LiteCard today.'
    )
    style: Optional[Style] = None
    connectIDEnabled: Optional[bool] = Field(
        None, description='Enable ConnectID Verification', example='false'
    )
    isInternal: Optional[bool] = Field(
        None, description='Public Visibility of the form', example=True
    )
    templateId: Optional[str] = Field(
        None, description='Id for the template used to create the card', example='test_business'
    )
    status: Optional[Status1] = Field(None, description='Status of the form', example='ACTIVE')


class ImageType(Enum):
    icon = 'icon'
    logo = 'logo'
    strip = 'strip'
    thumbnail = 'thumbnail'


class ImageContent(BaseModel):
    imageId: Optional[constr(regex=r'^[a-zA-Z0-9-_]+$')] = Field(
        None, description='Image Id', example='bDy_EeG2Ivd7vVrX45jx'
    )
    imageType: Optional[ImageType] = Field(None, description='Image Type')
    content: Optional[str] = Field(
        None,
        description='base64 encoded string',
        example='data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==',
    )


class ImageUploadResponse(BaseModel):
    success: Optional[bool] = Field(None, example=True)
    objectKey: Optional[str] = Field(
        None, description='s3 object key', example='cryo/bDy_EeG2Ivd7vVrX45jx-logo@3x.png'
    )
    imageUrl: Optional[str] = Field(
        None,
        description='s3 image url',
        example='https://lc-business-assets-dev.s3.ap-southeast-2.amazonaws.com/test-business/logo.png',
    )


class ListCardOwnersResponse(BaseModel):
    class Config:
        extra = Extra.allow

    id: str = Field(..., description='Id of the card', example='-jJWhjZ1a')
    firstName: Optional[str] = Field(
        None, description='First name of card owner', example='Ankus Fang'
    )
    lastName: Optional[str] = Field(
        None, description='Last name of card owner', example='AHVW1qv4I_Teqdu4VjwMA'
    )
    phone: Optional[str] = Field(
        None, description='phoneNumber of the card owner', example='0409381912'
    )
    email: Optional[str] = Field(
        None, description='Email of the card owner', example='test@litecard.io'
    )
    userType: Optional[str] = Field(None, description='User Type', example='basic')
    state: Optional[str] = Field(None, description='State the user is from ', example='VIC')


class DataFields1(BaseModel):
    class Config:
        extra = Extra.allow

    memberSince: Optional[str] = Field(
        None, description='Date time when becoming a member', example='2021-10-11T07:00:15.075Z'
    )
    fullName: Optional[str] = Field(None, description='Full name of the pass', example='Test name')
    numEntriesRemaining: Optional[float] = Field(
        None, description='Numbers of entries remaining', example=10
    )
    userType: Optional[str] = Field(None, description='User type', example='Patron')
    position: Optional[str] = Field(None, description='Position for the user', example='Staff')


class ListCardsDetail(BaseModel):
    id: str = Field(..., description='Id of the card', example='-jJWhjZ1a')
    downloadId: Optional[str] = Field(
        None, description='DownloadId used for landing page', example='V1StGXR8_Z5jdHi6B-myT'
    )
    accountName: str = Field(..., description='Name associated with the pass', example='John Doe')
    barcodeValue: Optional[str] = Field(
        None, description='Barcode Value of the Card', example='eqdu4VjAHVW1qv4I_TwMA'
    )
    passType: Optional[str] = Field(None, description='Pass Type', example='VISIT')
    appleLink: str = Field(
        ...,
        description='Link to apple pass',
        example='https://litecard-demo-pkpass.s3-ap-southeast-2.amazonaws.com/coldbrew.pkpass',
    )
    googleLink: str = Field(
        ...,
        description='Link to google pass',
        example='https://pay.google.com/gp/v/save/eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJsaXRlY2FyZC10ZXN0QGNsZXZlci1hYmJleS0zMDg1MDcuaWFtLmdzZXJ2aWNlYWNjb3VudC5jb20iLCJhdWQiOiJnb29nbGUiLCJ0eXAiOiJzYXZldG9hbmRyb2lkcGF5IiwiaWF0IjoxNjIwMTE0NDkxLCJwYXlsb2FkIjp7ImxveWFsdHlPYmplY3RzIjpbeyJpZCI6IjMzODgwMDAwMDAwMTA2MDYyNDEuTE9ZQUxUWV9PQkpFQ1RfNTRkYmMwNTUtOWRlMy00YWZjLTg0YmUtZDhiNTZjN2U5Mzc5IiwiY2xhc3NJZCI6IjMzODgwMDAwMDAwMTA2MDYyNDEuTE9ZQUxUWV9DTEFTU185OTliOTVlYi00ZDVjLTQzZDEtOGFhOC05Zjg1ZjI0YzlmODQiLCJzdGF0ZSI6IkFDVElWRSIsImFjY291bnROYW1lIjoiSmFzb24iLCJhY2NvdW50SWQiOiIxMjMxMjMiLCJiYXJjb2RlIjp7ImFsdGVybmF0ZVRleHQiOiIxMjMxMjMiLCJ2YWx1ZSI6IjEyMzEyMyIsInR5cGUiOiJDT0RFXzEyOCJ9LCJsb2NhdGlvbnMiOlt7ImxhdGl0dWRlIjoiLTM3LjgwNjIzMTU2ODQyODgxIiwibG9uZ2l0dWRlIjoiMTQ0Ljk4OTkwMjQwODE0ODcifV0sInZhbGlkVGltZUludGVydmFsIjp7InN0YXJ0Ijp7ImRhdGUiOiIyMDIxLTA0LTIwVDAwOjAwOjAwLjAwKzEwOjAwIn0sImVuZCI6eyJkYXRlIjoiMjAyNS0wNC0yMFQyMzo1OTowMC4wMCsxMDowMCJ9fSwibGlua3NNb2R1bGVEYXRhIjp7InVyaXMiOlt7InVyaSI6InRlbDo2NTA1NTU1NTU1IiwiZGVzY3JpcHRpb24iOiJNb2JpbGUgTnVtYmVyIn0seyJ1cmkiOiJtYWlsdG86am9obmRvZUBsaXRlY2FyZC5jb20uYXUiLCJkZXNjcmlwdGlvbiI6IkVtYWlsIn1dfX1dfSwib3JpZ2lucyI6WyJodHRwOi8vbG9jYWxob3N0OjgwODAiXX0.bR5nSNqMPH6KUwiaqMP-E-nlyjzllOR9-rxUCVgPhqvra_qZ54kc3ZHX64LyViABgSbLIqFEG_EsfA9FCVunAs3ikr1yB5Tk3WiwQ13zt-rH7443_XTI078mtzESl930AL5mVhyrteTMfrhHHV0rrzChXDPgqBjPzsaqs4oGIeW7bVu7S1SC_M8EC-pxTUwqkvvv17xpBVBY_BKzDaK1uEykqdQp2XFHjjRT_esBc6xbiMTDGz11sp395v0RO-9jpp4z-L5igi7prFDgm7ZWBcbSZSKMBckp1lzctLIZ3jidJ9pg-lwgaZyyksmWWnDkVFKE0CWAQV3wFg6M2PXXyA',
    )
    templateId: str = Field(..., description='Template id of the card', example='rnb-patron')
    dataFields: Optional[DataFields1] = Field(None, description='Data Fields of the pass')
    formId: str = Field(..., description='Id for field input form', example='00000001')
    cardOwnerId: str = Field(..., description='Card owner Id', example='eJoGyeOMcyd1jnfPSuTvH')


class Style2(BaseModel):
    bgPrimary: Optional[str] = Field(
        None, description='Primary colour for the form background', example='#1890ff'
    )
    bgSecondary: Optional[str] = Field(
        None, description='Secondary colour for the form background', example='#1890ff'
    )
    btnPrimary: Optional[str] = Field(
        None, description='Secondary colour for the button', example='#1890ff'
    )
    btnSecondary: Optional[str] = Field(
        None, description='Secondary colour for the button', example='#1890ff'
    )


class Id(BaseModel):
    createdAt: Optional[str] = Field(
        None, description='Create date of the form', example='2021-08-11T03:15:56.860Z'
    )
    fields: Optional[List[FormFields]] = None
    formName: Optional[str] = Field(None, description='Name of the form', example='test form')
    createdBy: Optional[str] = Field(
        None,
        description='Auth0 Id of the user who created this instance',
        example='V1StGXR8_Z5jdHi6B-myT',
    )
    businessId: Optional[str] = Field(
        None, description='Id for the Business that this entity belongs to', example='LiteCard'
    )
    ttlEnabled: Optional[bool] = Field(None, description='Enable ttl', example='true')
    ttlPeriod: Optional[float] = Field(None, description='Set ttl period', example='10')
    updatedAt: Optional[str] = Field(
        None, description='Update date of the form', example='2021-08-11T03:15:56.860Z'
    )
    passwordEnabled: Optional[bool] = Field(None, description='Enable password', example='true')
    logo: Optional[str] = Field(
        None, description='logo image link url', example='https://assets-dev.litecard.io/logo.png'
    )
    title: Optional[str] = Field(None, description='Title of the form', example='LiteCard')
    description: Optional[str] = Field(
        None, description='Description of the form', example='Make your move with LiteCard today.'
    )
    style: Optional[Style2] = None
    connectIDEnabled: Optional[bool] = Field(
        None, description='Enable ConnectID Verification', example='false'
    )


class ListFormsResultItem(BaseModel):
    id: Optional[Id] = Field(None, description='formId', example='-jJWhjZ1a')


class ListFormsResult(BaseModel):
    __root__: List[ListFormsResultItem] = Field(..., description='List Forms Schema')


class Id1(BaseModel):
    accountName: Optional[str] = Field(
        None, description='Name associated with the pass', example='John Doe'
    )
    downloadId: Optional[str] = Field(
        None, description='DownloadId used for landing page', example='V1StGXR8_Z5jdHi6B-myT'
    )
    createdAt: Optional[str] = Field(
        None,
        description='Date when pass was first created, in ISO-8601 format',
        example='2021-07-01T12:13:20.159Z',
    )
    updatedAt: Optional[str] = Field(
        None,
        description='Date when pass was last updated, in ISO-8601 format',
        example='2021-07-08T02:48:50.399Z',
    )
    appleLink: Optional[str] = Field(
        None,
        description='Link to apple pass',
        example='https://litecard-demo-pkpass.s3-ap-southeast-2.amazonaws.com/coldbrew.pkpass',
    )
    googleLink: Optional[str] = Field(
        None,
        description='Link to google pass',
        example='https://pay.google.com/gp/v/save/eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJsaXRlY2FyZC10ZXN0QGNsZXZlci1hYmJleS0zMDg1MDcuaWFtLmdzZXJ2aWNlYWNjb3VudC5jb20iLCJhdWQiOiJnb29nbGUiLCJ0eXAiOiJzYXZldG9hbmRyb2lkcGF5IiwiaWF0IjoxNjIwMTE0NDkxLCJwYXlsb2FkIjp7ImxveWFsdHlPYmplY3RzIjpbeyJpZCI6IjMzODgwMDAwMDAwMTA2MDYyNDEuTE9ZQUxUWV9PQkpFQ1RfNTRkYmMwNTUtOWRlMy00YWZjLTg0YmUtZDhiNTZjN2U5Mzc5IiwiY2xhc3NJZCI6IjMzODgwMDAwMDAwMTA2MDYyNDEuTE9ZQUxUWV9DTEFTU185OTliOTVlYi00ZDVjLTQzZDEtOGFhOC05Zjg1ZjI0YzlmODQiLCJzdGF0ZSI6IkFDVElWRSIsImFjY291bnROYW1lIjoiSmFzb24iLCJhY2NvdW50SWQiOiIxMjMxMjMiLCJiYXJjb2RlIjp7ImFsdGVybmF0ZVRleHQiOiIxMjMxMjMiLCJ2YWx1ZSI6IjEyMzEyMyIsInR5cGUiOiJDT0RFXzEyOCJ9LCJsb2NhdGlvbnMiOlt7ImxhdGl0dWRlIjoiLTM3LjgwNjIzMTU2ODQyODgxIiwibG9uZ2l0dWRlIjoiMTQ0Ljk4OTkwMjQwODE0ODcifV0sInZhbGlkVGltZUludGVydmFsIjp7InN0YXJ0Ijp7ImRhdGUiOiIyMDIxLTA0LTIwVDAwOjAwOjAwLjAwKzEwOjAwIn0sImVuZCI6eyJkYXRlIjoiMjAyNS0wNC0yMFQyMzo1OTowMC4wMCsxMDowMCJ9fSwibGlua3NNb2R1bGVEYXRhIjp7InVyaXMiOlt7InVyaSI6InRlbDo2NTA1NTU1NTU1IiwiZGVzY3JpcHRpb24iOiJNb2JpbGUgTnVtYmVyIn0seyJ1cmkiOiJtYWlsdG86am9obmRvZUBsaXRlY2FyZC5jb20uYXUiLCJkZXNjcmlwdGlvbiI6IkVtYWlsIn1dfX1dfSwib3JpZ2lucyI6WyJodHRwOi8vbG9jYWxob3N0OjgwODAiXX0.bR5nSNqMPH6KUwiaqMP-E-nlyjzllOR9-rxUCVgPhqvra_qZ54kc3ZHX64LyViABgSbLIqFEG_EsfA9FCVunAs3ikr1yB5Tk3WiwQ13zt-rH7443_XTI078mtzESl930AL5mVhyrteTMfrhHHV0rrzChXDPgqBjPzsaqs4oGIeW7bVu7S1SC_M8EC-pxTUwqkvvv17xpBVBY_BKzDaK1uEykqdQp2XFHjjRT_esBc6xbiMTDGz11sp395v0RO-9jpp4z-L5igi7prFDgm7ZWBcbSZSKMBckp1lzctLIZ3jidJ9pg-lwgaZyyksmWWnDkVFKE0CWAQV3wFg6M2PXXyA',
    )
    dataFields: Optional[DataFields1] = Field(None, description='Data Fields of the pass')
    formId: Optional[str] = Field(None, description='Id for field input form', example='form123')


class ListPassesResultItem(BaseModel):
    id: Optional[Id1] = Field(None, description='passId', example='00000001')


class ListPassesResult(BaseModel):
    __root__: List[ListPassesResultItem] = Field(..., description='List Passes Schema')


class Url(BaseModel):
    url: Optional[str] = Field(None, description='URL')
    title: Optional[str] = Field(None, description='Link title')


class Metadata(BaseModel):
    contractAddress: str = Field(..., description='Contract Address for the NFT Collection')
    tokenId: str = Field(..., description='Token Id of the NFT')
    collectionName: str = Field(..., description='Name of the NFT Collection')
    image: str = Field(..., description='Image URI')
    ownerOf: str = Field(..., description='Wallet address of the owner')
    urls: Optional[List[Url]] = Field(None, description='List of relevant URLs about the NFT')


class Url1(BaseModel):
    title: str = Field(..., description='Title of the Link')
    link: str = Field(..., description='URL link')
    description: str = Field(..., description='Description of the page link')


class NftPage(BaseModel):
    title: str = Field(..., description='Title of the NFT Page')
    description: Optional[str] = Field(None, description='Short description of NFT Page')
    urls: List[Url1]


class NFTRequestBody(BaseModel):
    metadata: Metadata
    nftPage: Optional[NftPage] = None
    signature: str = Field(..., description='Hash of the metadata')
    qrCodeUrl: Optional[str] = Field(None, description='Url that is displayed on the card')


class AdditionalMergeField(BaseModel):
    name: str = Field(..., description='Segment Name/Merge Field', example='postCode')
    helpText: str = Field(
        ...,
        description='Helpful text to show in mailchimp UI for Segment',
        example='The Post Code of the customer',
    )
    tag: constr(regex=r'^[A-Z0-9]+$', max_length=10) = Field(
        ..., description='Tag to use', example='POSTCODE'
    )


class OnboardMailchimpBody(BaseModel):
    accessToken: Optional[str] = Field(
        None, description='Mailchimp access token', example='d657...a926-us14'
    )
    server: Optional[str] = Field(None, description='Mailchimp server', example='us14')
    fromEmail: Optional[str] = Field(
        None, description='Mailchimp email to send from', example='test@example.com'
    )
    audience: Optional[str] = Field(
        None, description='Name of the Mailchimp Audience', example='Litecard'
    )
    additionalMergeFields: Optional[List[AdditionalMergeField]] = Field(
        None, description='Business customisable merge fields or segments'
    )


class PaymentAndSignUpResponseSchema(BaseModel):
    cardId: Optional[str] = Field(None, description='Id of created card', example='abc123')
    checkoutUrl: Optional[str] = Field(
        None, description='URL to redirect to continue payment', example='https://checkout.url'
    )
    success: Optional[bool] = Field(
        None, description='Returns whether the request was successful', example=True
    )
    downloadId: Optional[str] = Field(
        None,
        description='Id used for hosted litecard landing page e.g. https://app.dev.litecard.io/welcome/?id=5c_Wc9h-WCng0oxe8nHNn',
        example='5c_Wc9h-WCng0oxe8nHNn',
    )


class EmailType(Enum):
    STANDARD = 'STANDARD'
    MARKETING = 'MARKETING'


class PrivateResendPassRequest(BaseModel):
    cardId: Optional[str] = Field(None, description='Card Id', example='00000001')
    formId: Optional[str] = Field(None, description='Id for field input form', example='00000001')
    cardOwnerId: Optional[str] = Field(None, description='Card Owner Id', example='00000001')
    emailTemplateType: Optional[str] = Field(
        None, description='Email Template Type', example='litecardpass'
    )
    emailType: Optional[EmailType] = Field(None, description='Type of Email', example='STANDARD')
    subject: Optional[str] = Field(
        None, description='Subject of Email', example='LiteCard Invitation'
    )
    sendAllNotDownloaded: Optional[bool] = Field(
        None, description='Send to all users who have not downloaded the pass', example=True
    )


class PublicResendPassRequest(BaseModel):
    email: Optional[str] = Field(None, description='Email', example='johndoe@example.com')
    phone: Optional[str] = Field(None, description='Email', example='johndoe@example.com')
    formId: str = Field(..., description='Id for field input form', example='00000001')


class Rule(BaseModel):
    duration: Optional[float] = Field(
        None, description='Time Duration for the limit and unit is seconds', example=300
    )
    count: Optional[float] = Field(None, description='Numbers of limit count', example=10)


class RateLimit(BaseModel):
    enabled: Optional[bool] = Field(None, description='Enabled the rate limit', example=True)
    rule: Optional[Rule] = None


class DataFields3(BaseModel):
    class Config:
        extra = Extra.allow

    fullName: Optional[str] = Field(
        None, description='The full name as it appears on the card.', example='Danny Bui'
    )
    intro: Optional[str] = Field(
        None,
        description='An introductory message or description related to the scan.',
        example='Scan or show your digital pass at checkout to earn points, discounts, exclusive deals and access to promotions.',
    )
    notificationKey: Optional[str] = Field(
        None,
        description='A key for managing notifications post-scan.',
        example='No new notifications',
    )
    points: Optional[int] = Field(
        None, description='The number of points associated with this scan.', example=6
    )
    store: Optional[str] = Field(
        None,
        description='The store or location name where the scan took place.',
        example='CHAI CHEE',
    )
    updates: Optional[str] = Field(
        None,
        description='Information on updates or alerts to be sent to the card owner.',
        example='You will receive periodic alerts and notifications through this digital membership or via email.',
    )


class ScanType(Enum):
    SCAN = 'SCAN'
    REDEEM = 'REDEEM'


class Status2(Enum):
    DELETED = 'DELETED'
    INACTIVE = 'INACTIVE'
    ACTIVE = 'ACTIVE'
    RESERVED = 'RESERVED'
    ERROR = 'ERROR'


class Scan(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The unique identifier for the scan event.',
        example='yiur9CQTcrLKmELe4_enI',
    )
    accountName: Optional[str] = Field(
        None, description='The name of the account associated with the scan.', example='Danny Bui'
    )
    businessId: Optional[str] = Field(
        None,
        description='The unique identifier for the business associated with the scan.',
        example='eFGbNdZEQHJX8RdnLMtP_',
    )
    cardId: Optional[str] = Field(
        None,
        description='The unique identifier for the card that was scanned.',
        example='4048866019',
    )
    cardOwnerId: Optional[str] = Field(
        None,
        description='The unique identifier for the owner of the card.',
        example='-3xlaPTtLTGnmbKoaiyKH',
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='The date and time when the scan event was created.',
        example='2023-07-19T04:36:06.937Z',
    )
    createdBy: Optional[str] = Field(
        None,
        description='The identifier of the user or system that created the scan event.',
        example='auth0|64928a1d73375442becf490d',
    )
    deviceId: Optional[str] = Field(
        None,
        description='The identifier for the device used to perform the scan, if known.',
        example='12345-device-id',
    )
    deviceName: Optional[str] = Field(
        None,
        description='The name of the device used to perform the scan, if known.',
        example='Front Counter POS #1',
    )
    location: Optional[str] = Field(
        None,
        description='The physical location where the scan took place, if known.',
        example='Main Store - POS #1',
    )
    templateId: Optional[str] = Field(
        None,
        description='The unique identifier for the template associated with the scan event.',
        example='HtXloDbbAz7Q-IgT7WpLn',
    )
    updatedAt: Optional[datetime] = Field(
        None,
        description='The date and time when the scan event was last updated.',
        example='2023-07-19T04:36:06.937Z',
    )
    userType: Optional[str] = Field(None, description='User Type', example='patron')
    dataFields: Optional[DataFields3] = Field(
        None, description='Structured data associated with the scan.'
    )
    formId: Optional[str] = Field(
        None,
        description='The unique identifier for the form used to capture the scan data.',
        example='xGScW8kBMGFJfxIoGHg7C',
    )
    scanType: Optional[ScanType] = Field(
        None,
        description="The type of scan event, which can be either a 'SCAN' or a 'REDEEM'.",
        example='SCAN',
    )
    status: Optional[Status2] = Field(
        None, description='The current status of the scan.', example='ACTIVE'
    )


class ScanCheckInRequestBody(BaseModel):
    cardId: str = Field(..., description='Scanned Card Id', example='123456789')
    deviceId: Optional[str] = Field(
        None, description='Device ID of the barcode scanner', example='DFAS87GgjHJG'
    )
    deviceName: Optional[str] = Field(
        None, description='Scanner Name', example='CryoGym Frontdoor Scanner'
    )
    location: Optional[str] = Field(None, description='Location Name', example='CryoGym')


class ScanRedemptionRequestBody(BaseModel):
    cardId: str = Field(..., description='Scanned Card Id', example='123456789')
    action: Optional[str] = Field(
        None, description='Type of action to be executed', example='REDEEM_BURGER'
    )


class ScanRequestBody(BaseModel):
    barcode: str = Field(..., description='Scanned barcode', example='123456789')


class DataFields4(BaseModel):
    exampleDataField: Optional[str] = Field(
        None, description='Example Value', example='example value'
    )
    fullName: Optional[str] = Field(
        None, description='Full name of owner of card', example='John Doe'
    )


class Status3(Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'
    DELETED = 'DELETED'
    RESERVED = 'RESERVED'
    ERROR = 'ERROR'


class Card1(BaseModel):
    id: Optional[str] = Field(None, description='ID of the Pass', example='7048582966')
    downloadId: Optional[str] = Field(
        None, description='DownloadId used for landing page', example='V1StGXR8_Z5jdHi6B-myT'
    )
    appleLink: Optional[str] = Field(
        None,
        description='Url for the apple pass',
        example='https://litecard-demo-pkpass.s3-ap-southeast-2.amazonaws.com/coldbrew.pkpass',
    )
    businessId: Optional[str] = Field(None, description='ID of the Business', example='business123')
    userType: Optional[str] = Field(None, description='Type of User', example='employee')
    createdAt: Optional[str] = Field(
        None, description='Date Time card was created', example='2021-11-05T04:25:42.676Z'
    )
    googlePassId: Optional[str] = Field(None, description='Id of google pass', example='1231244')
    authToken: Optional[str] = Field(
        None, description='Internal Use Only. Apple Device Auth Token', example='dscxdsf234'
    )
    passType: Optional[str] = Field(None, description='Mobile wallet pass type', example='VISIT')
    googleLink: Optional[str] = Field(
        None,
        description='Url of google pass',
        example='https://pay.google.com/gp/v/save/eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJsaXRlY2FyZC10ZXN0QGNsZXZlci1hYmJleS0zMDg1MDcuaWFtLmdzZXJ2aWNlYWNjb3VudC5jb20iLCJhdWQiOiJnb29nbGUiLCJ0eXAiOiJzYXZldG9hbmRyb2lkcGF5IiwiaWF0IjoxNjIwMTE0NDkxLCJwYXlsb2FkIjp7ImxveWFsdHlPYmplY3RzIjpbeyJpZCI6IjMzODgwMDAwMDAwMTA2MDYyNDEuTE9ZQUxUWV9PQkpFQ1RfNTRkYmMwNTUtOWRlMy00YWZjLTg0YmUtZDhiNTZjN2U5Mzc5IiwiY2xhc3NJZCI6IjMzODgwMDAwMDAwMTA2MDYyNDEuTE9ZQUxUWV9DTEFTU185OTliOTVlYi00ZDVjLTQzZDEtOGFhOC05Zjg1ZjI0YzlmODQiLCJzdGF0ZSI6IkFDVElWRSIsImFjY291bnROYW1lIjoiSmFzb24iLCJhY2NvdW50SWQiOiIxMjMxMjMiLCJiYXJjb2RlIjp7ImFsdGVybmF0ZVRleHQiOiIxMjMxMjMiLCJ2YWx1ZSI6IjEyMzEyMyIsInR5cGUiOiJDT0RFXzEyOCJ9LCJsb2NhdGlvbnMiOlt7ImxhdGl0dWRlIjoiLTM3LjgwNjIzMTU2ODQyODgxIiwibG9uZ2l0dWRlIjoiMTQ0Ljk4OTkwMjQwODE0ODcifV0sInZhbGlkVGltZUludGVydmFsIjp7InN0YXJ0Ijp7ImRhdGUiOiIyMDIxLTA0LTIwVDAwOjAwOjAwLjAwKzEwOjAwIn0sImVuZCI6eyJkYXRlIjoiMjAyNS0wNC0yMFQyMzo1OTowMC4wMCsxMDowMCJ9fSwibGlua3NNb2R1bGVEYXRhIjp7InVyaXMiOlt7InVyaSI6InRlbDo2NTA1NTU1NTU1IiwiZGVzY3JpcHRpb24iOiJNb2JpbGUgTnVtYmVyIn0seyJ1cmkiOiJtYWlsdG86am9obmRvZUBsaXRlY2FyZC5jb20uYXUiLCJkZXNjcmlwdGlvbiI6IkVtYWlsIn1dfX1dfSwib3JpZ2lucyI6WyJodHRwOi8vbG9jYWxob3N0OjgwODAiXX0.bR5nSNqMPH6KUwiaqMP-E-nlyjzllOR9-rxUCVgPhqvra_qZ54kc3ZHX64LyViABgSbLIqFEG_EsfA9FCVunAs3ikr1yB5Tk3WiwQ13zt-rH7443_XTI078mtzESl930AL5mVhyrteTMfrhHHV0rrzChXDPgqBjPzsaqs4oGIeW7bVu7S1SC_M8EC-pxTUwqkvvv17xpBVBY_BKzDaK1uEykqdQp2XFHjjRT_esBc6xbiMTDGz11sp395v0RO-9jpp4z-L5igi7prFDgm7ZWBcbSZSKMBckp1lzctLIZ3jidJ9pg-lwgaZyyksmWWnDkVFKE0CWAQV3wFg6M2PXXyA',
    )
    samsungLink: Optional[str] = Field(
        None,
        description='Url of samsung pass',
        example='https://a.swallet.link/atw/656147182764415319#Clip?pdata=sIgHCzIwM9g',
    )
    templateId: str = Field(
        ..., description='Id for the template used to create the card', example='test_business'
    )
    dataFields: Optional[DataFields4] = None
    formId: str = Field(..., description='Id for field input form', example='00000001')
    updatedAt: Optional[str] = Field(None, description='', example='2021-11-05T04:25:42.676Z')
    pkPassId: Optional[str] = Field(
        None, description='Id of Apple Pass', example='pass.au.com.litecard.dev.q124234'
    )
    barcodeValue: Optional[str] = Field(
        None, description='what the barcode value is', example='5434435'
    )
    appleStatus: Optional[str] = Field(
        None, description='Status of card inside of Apple Wallet', example='ACTIVE'
    )
    googleStatus: Optional[str] = Field(
        None, description='Status of card inside of Google Wallet', example='INACTIVE'
    )
    cardOwnerId: Optional[str] = Field(None, description='Id of the card owner', example='asb123')
    status: Optional[Status3] = Field(
        None, description='Activation Status of the card', example='INACTIVE'
    )
    expiry: Optional[str] = Field(
        None, description='Expiry of card, in ISO-8601 format', example='2021-08-11T03:15:56.860Z'
    )
    barcodeLink: Optional[str] = Field(
        None, description='Link to the barcode image', example='https://example.com/blah.png'
    )
    disableQR: Optional[bool] = Field(
        None, description='Disable QR code on Welcome Page', example=True
    )
    stripeCustomerId: Optional[str] = Field(
        None, description='stripeCustomerId for subscription passes', example='str_123'
    )
    disableDownload: Optional[bool] = Field(
        None,
        description='Disable download link if pass is already activated. Default: false',
        example=True,
    )


class CardOwner1(BaseModel):
    class Config:
        extra = Extra.allow

    id: str = Field(..., description='Id of the card', example='-jJWhjZ1a')
    firstName: Optional[str] = Field(
        None, description='First name of card owner', example='Ankus Fang'
    )
    lastName: Optional[str] = Field(
        None, description='Last name of card owner', example='AHVW1qv4I_Teqdu4VjwMA'
    )
    phone: Optional[str] = Field(
        None, description='phoneNumber of the card owner', example='0409381912'
    )
    email: Optional[str] = Field(
        None, description='Email of the card owner', example='test@litecard.io'
    )
    userType: Optional[str] = Field(None, description='User Type', example='basic')
    state: Optional[str] = Field(None, description='State the user is from ', example='VIC')


class SendNotificationRequestBody(BaseModel):
    title: Optional[str] = Field(
        None, description='Title of the Notification', example='Friday Sales'
    )
    message: Optional[str] = Field(
        None, description='Message Body of the Notification', example='Buy 2 Get The 3rd 20% Off'
    )
    isPushNotification: Optional[bool] = Field(
        None, description='Toggle for Sending Apple Push Notifications', example=True
    )
    emailType: Optional[EmailType] = Field(None, description='Type of Email', example='MARKETING')


class SourceEmail(Enum):
    tarfish_litecard_io = 'tarfish@litecard.io'
    donotreply_shakewellwallet_com = 'donotreply@shakewellwallet.com'
    noreply_lune_litecard_io = 'noreply@lune.litecard.io'


class SignUpOptions(BaseModel):
    downloadId: Optional[str] = Field(
        None,
        description='Optional. Specify the downloadId that should be used. This Id can be used to get the download urls for the created card',
    )
    password: Optional[str] = Field(
        None, description='Optional. For password protected public sign ups', example='password123'
    )
    emailType: Optional[EmailType] = Field(
        'STANDARD',
        description='Optional. Senders email address, standard is used for most cases unless a marketing email address has been set up',
        example='STANDARD',
    )
    emailInvitationEnabled: Optional[bool] = Field(
        None,
        description='Flag to send an email invitation with Apple/Google wallet cards to the user',
        example=False,
    )
    emailTemplate: Optional[str] = Field(
        None, description='Select which email template option to use.', example='litecardpass'
    )
    smsInvitationEnabled: Optional[bool] = Field(
        None,
        description='Flag to send an sms invitation with Apple/Google wallet cards to the user',
        example=False,
    )
    smsTemplate: Optional[str] = Field(
        None, description='Select which email template option to use.', example='litecardpass'
    )
    sourceEmail: Optional[SourceEmail] = Field(
        None,
        description='IF not using default from domain, specify what from address to use',
        example='tarfish@litecard.io',
    )
    noPI: Optional[bool] = Field(
        None,
        description='Flag to disable requirement for Email or Phone in card payload. Default: false',
        example=True,
    )


class SignUpResponseSchema(BaseModel):
    cardId: Optional[str] = Field(None, description='Id of created card', example='abc123')
    success: Optional[bool] = Field(
        None, description='Returns whether the request was successful', example=True
    )
    downloadId: Optional[str] = Field(
        None,
        description='Id used for hosted litecard landing page e.g. https://app.dev.litecard.io/welcome/?id=5c_Wc9h-WCng0oxe8nHNn',
        example='5c_Wc9h-WCng0oxe8nHNn',
    )


class Prize(BaseModel):
    item: Optional[str] = Field(
        None, description='Prize for the spin to win result', example='FREE_BURGER'
    )
    index: Optional[float] = Field(
        None, description='Index of the selected prize item', example='FREE_BURGER'
    )


class SpinToWinResponse(BaseModel):
    class Config:
        extra = Extra.allow

    prize: Optional[Prize] = Field(
        None, description='Prize for the spin to win result', example='FREE_BURGER'
    )
    prizeOptions: Optional[List[str]] = None
    downloadId: Optional[str] = Field(
        None, description='DownloadId used for reward page', example='V1StGXR8_Z5jdHi6B-myT'
    )


class StripeCheckoutBody(BaseModel):
    priceId: Optional[str] = Field(
        None, description='priceId for stripe', example='price_abc123...'
    )
    origin: Optional[str] = Field(
        None,
        description='Page for stripe to redirect to on success or cancel',
        example='http://localhost:5000',
    )
    quantity: Optional[float] = Field(
        None,
        description="Set to '1' for one subscription and set to 'undefined' for metered subscription",
        example=1,
    )


class StripeCustomerPortalBody(BaseModel):
    origin: Optional[str] = Field(
        None,
        description='Set default page for stripe to navigate back',
        example='http://localhost:5000',
    )


class SubBusinessRoles(BaseModel):
    __root__: Optional[Dict[str, List[str]]] = Field(
        None, description='Roles associated with the business'
    )


class SubBusinessSummary(BaseModel):
    id: Optional[str] = Field(None, description='Business Id', example='CryoGym')
    businessName: Optional[str] = Field(None, description='Business name', example='Cryo gym')
    subBusinessName: Optional[str] = Field(
        None, description='Name to show on sub business selection', example='Cryo gym - Sub 1'
    )
    logoUrl: Optional[str] = Field(
        None,
        description='Business logo image file',
        example='https://assets.dev.litecard.io/Logo-Badge_3.png',
    )


class TemplateActionCondition(BaseModel):
    type: str = Field(..., description='Type of condition to be run', example='CHECK_IN')
    optional: bool = Field(
        ..., description='Condition to run action on every invocation to the endpoint', example=True
    )
    order: Optional[int] = Field(
        None, description='Order of actions to be run on each invocation', example=1
    )
    field: Optional[str] = Field(
        None, description='Field name used for conditional checking', example='points'
    )
    value: Optional[int] = Field(
        None, description='Value to be compared against during the conditional check', example=10
    )


class TemplateActionParams(BaseModel):
    type: str = Field(..., description='Type of action to be executed', example='INCREMENT')
    amount: Optional[int] = Field(
        None, description='Value used in conjuction with the action', example=10
    )
    field: Optional[str] = Field(
        None, description='Field name to perform action on', example='points'
    )
    incrementAmount: Optional[int] = Field(
        None,
        description='Used with the INCREMENT_DECREMENT action, amount to be incremented by',
        example=1,
    )
    incrementField: Optional[str] = Field(
        None,
        description='Used with the INCREMENT_DECREMENT action, field to be incremented',
        example='freeBurgerCount',
    )
    decrementAmount: Optional[int] = Field(
        None,
        description='Used with the INCREMENT_DECREMENT action, amount to be decremented by',
        example=10,
    )
    decrementField: Optional[str] = Field(
        None,
        description='Used with the INCREMENT_DECREMENT action, field to be decremented',
        example='points',
    )


class TemplateActions1(BaseModel):
    condition: TemplateActionCondition
    action: TemplateActionParams
    label: Optional[str] = Field(None, description='Name of the Action', example='Redeem Burger')


class TemplateActions(BaseModel):
    __root__: Optional[Dict[str, TemplateActions1]] = None


class TemplateBarcode(BaseModel):
    barcodeValue: Optional[str] = Field(
        None, description='Value of the Barcode', example='7048582966'
    )
    messageEncoding: Optional[str] = Field(
        None, description='Message Encoding of the Barcode', example='iso-8859-1'
    )
    type: Optional[str] = Field(None, description='Type of the Barcode', example='CODE_128')
    altText: Optional[bool] = Field(
        True,
        description='Enable having the Pass ID displayed at the bottom of the barcode',
        example='1231244',
    )
    enabled: Optional[bool] = Field(
        False, description='Whether the barcode is enabled', example=True
    )


class ExpiryType(Enum):
    NEVER = 'NEVER'


class TemplateCardExpiry1(BaseModel):
    expiryType: Optional[ExpiryType] = Field(
        None,
        description='Type of expiry, either NEVER, FIXED_DATE, FROM_ACTIVATION ',
        example='NEVER',
    )


class ExpiryType1(Enum):
    FIXED_DATE = 'FIXED_DATE'


class TemplateCardExpiry2(BaseModel):
    expiryType: Optional[ExpiryType1] = Field(
        None,
        description='Type of expiry, either NEVER, FIXED_DATE or FROM_ACTIVATION',
        example='FIXED_DATE',
    )
    fixedDate: Optional[str] = Field(
        None,
        description='The fixed date the card produced by this template will expire',
        example='2022-01-10T07:00:15.075Z',
    )


class ExpiryType2(Enum):
    FROM_ACTIVATION = 'FROM_ACTIVATION'


class Measurement(Enum):
    DAYS = 'DAYS'
    MONTHS = 'MONTHS'
    YEARS = 'YEARS'


class FromActivation(BaseModel):
    amount: Optional[str] = Field(
        None,
        description='The amount of time (based on the cardExpiry.fromActivation.measurement field) between the activation of the card produced by this template, and the expiry date',
        example='10',
    )
    measurement: Optional[Measurement] = Field(
        None,
        description='The unit of measurement to calculate the amount of time between the activation of the card produced by this template, and the expiry date',
        example='YEARS',
    )


class TemplateCardExpiry3(BaseModel):
    expiryType: Optional[ExpiryType2] = Field(
        None,
        description='Type of expiry, either NEVER, FIXED_DATE or FROM_ACTIVATION',
        example='FROM_ACTIVATION',
    )
    fromActivation: Optional[FromActivation] = None


class ExpiryType3(Enum):
    FIXED_SCANS = 'FIXED_SCANS'


class TemplateCardExpiry4(BaseModel):
    expiryType: Optional[ExpiryType3] = Field(
        None,
        description='Type of expiry, either NEVER, FIXED_DATE, FROM_ACTIVATION or FIXED_SCANS',
        example='FIXED_SCANS',
    )
    scans: Optional[float] = Field(
        None, description='Number of scans remaining before pass expires', example=1
    )


class TemplateCardExpiry(BaseModel):
    __root__: Union[
        TemplateCardExpiry1, TemplateCardExpiry2, TemplateCardExpiry3, TemplateCardExpiry4
    ] = Field(
        ...,
        description='Card Expiry field on Template that details how cards created by the template will expire',
    )


class TemplateColours(BaseModel):
    background: Optional[str] = Field(
        None, description='Background colour of the template', example='#ffffff'
    )
    label: Optional[str] = Field(
        None, description='Label colour of the template', example='#ffffff'
    )
    foreground: Optional[str] = Field(
        None, description='Foreground colour of the template', example='#ffffff'
    )


class AppleFieldType(Enum):
    PRIMARY_FIELD = 'PRIMARY_FIELD'
    HEADER_FIELD = 'HEADER_FIELD'
    SECONDARY_FIELD = 'SECONDARY_FIELD'
    AUXILIARY_FIELD = 'AUXILIARY_FIELD'
    BACK_FIELD = 'BACK_FIELD'


class AppleTextAlignment(Enum):
    PKTextAlignmentLeft = 'PKTextAlignmentLeft'
    PKTextAlignmentCenter = 'PKTextAlignmentCenter'
    PKTextAlignmentRight = 'PKTextAlignmentRight'
    PKTextAlignmentNatural = 'PKTextAlignmentNatural'


class DateFieldType(Enum):
    DATETIME_NOW = 'DATETIME_NOW'


class FieldType(Enum):
    CARD = 'CARD'
    CARD_OWNER_AND_CARD = 'CARD_OWNER_AND_CARD'
    NONE = 'NONE'


class GoogleFieldTypeEnum(Enum):
    ACCOUNT_NAME = 'ACCOUNT_NAME'
    LOYALTY_POINTS = 'LOYALTY_POINTS'
    OFFER = 'OFFER'
    TEXT_MODULE_DATA = 'TEXT_MODULE_DATA'
    LINK_MODULE_DATA = 'LINK_MODULE_DATA'
    MESSAGES = 'MESSAGES'
    GENERIC = 'GENERIC'


class GoogleFieldType(BaseModel):
    __root__: Optional[GoogleFieldTypeEnum] = Field(
        None,
        description='The type of google field',
        example='TEXT_MODULE_DATA',
        title='Google Field Type',
    )


class TemplateDataFields(BaseModel):
    class Config:
        extra = Extra.forbid

    appleChangeMessage: Optional[str] = Field(
        '%@',
        description="This is the formatted string, that will be shown as a push notification message. The format string must contain %@, which is replaced with the field's new content. If no change message is set, the user isn't notified when the field changes.",
        example='Gate changed to %@',
        title='Apple Change Message',
    )
    appleDateStyle: Optional[DateTimeStyle] = 'NOT_USED'
    appleFieldPosition: Optional[conint(ge=0)] = Field(
        0,
        description='The position in the pass structure array. e.g. For a secondary field, a position of 0 means it is first in order to be rendered in that section. Positions start from 0.',
        example=1,
        title='Apple Field Position',
    )
    appleFieldType: Optional[AppleFieldType] = Field(
        '',
        description='The pass structure locations, each value pertains to a certain region/part of the apple pass',
        example='HEADER_FIELD',
        title='Apple Field Type',
    )
    appleIgnoreTimeZone: Optional[bool] = Field(
        False,
        description='Optional. Always display the time and date in the given time zone, not in the user’s current time zone. The default value is false.',
        example=True,
        title='Apple Ignore Time Zone',
    )
    appleAttributedValue: Optional[str] = Field(
        None,
        description='Overrides the apple field value key, can contain HTML a tags',
        example="<a href='http://google.com'>Google</a>",
        title='Apple Attributed Value',
    )
    appleIsRelativeDate: Optional[bool] = Field(
        False,
        description='Optional. If true, the label’s value is displayed as a relative date; otherwise, it is displayed as an absolute date. The default value is false.',
        example=True,
        title='Apple Relative Date',
    )
    appleTextAlignment: Optional[AppleTextAlignment] = Field(
        'PKTextAlignmentNatural',
        description='Optional. Argument that sets the text alignment of the field text. This value is not allowed on primary or back fields.',
        example='PKTextAlignmentRight',
        title='Apple Text Alignment',
    )
    appleTimeStyle: Optional[DateTimeStyle] = 'NOT_USED'
    dateField: Optional[bool] = Field(
        False,
        description='Value is true if the field is a date field',
        example=True,
        title='Date Field',
    )
    dateFieldType: Optional[DateFieldType] = Field(
        '', description='Type of date field', example='DATETIME_NOW', title='Date Field Type'
    )
    defaultValue: Optional[str] = Field(
        '',
        description='Default field value. Set this value if you want a starting value when you first create a card.',
        example=10,
        title='Default Value',
    )
    fieldDescription: Optional[str] = Field(
        None, description='Description of the field', example='This is the full name'
    )
    fieldEnabled: Optional[bool] = Field(
        True,
        description='Value is true if the field is enabled. Default value is true',
        example=False,
        title='Field Enabled',
    )
    fieldLabel: str = Field(
        ..., description='The label of the field', example='Member Since', title='Field Label'
    )
    fieldType: Optional[FieldType] = Field(
        '',
        description='Type of field, denotes whether the field belongs belongs in the card, or both card & card owner.',
        example='CARD',
        title='Field Type',
    )
    fieldValue: Optional[str] = Field(
        None,
        description='The value of the field. Default value is null as the value will be filled during a create/update process.',
        title='Field Value',
    )
    googleFieldType: Optional[GoogleFieldType] = Field(
        None,
        description='The type of google field',
        example='TEXT_MODULE_DATA',
        title='Google Field Type',
    )
    googleTextModulePosition: Optional[conint(ge=0)] = Field(
        0,
        description='The position in the text modules data array. e.g. A position of 0 means it is first in order to be rendered in that section. Positions start from 0.',
        example=1,
        title='Google Text Module Field Position',
    )
    userCanEdit: Optional[bool] = Field(
        False,
        description='Value is true if the field can be edited',
        example=True,
        title='User Editable',
    )
    frontEndMapping: Optional[List[str]] = Field(
        ['SCAN'],
        description='array that decides whether to render field on Scan Check In Page',
        example=['SCAN'],
        title='Front End Mapping',
    )


class TemplateImages(BaseModel):
    logo: Optional[str] = Field(
        None,
        description='URL of uploaded logo image',
        example='https://s3bucketlocation/business-name/logo.png',
    )
    hero: Optional[str] = Field(
        None,
        description='URL of uploaded hero image',
        example='https://s3bucketlocation/business-name/hero.png',
    )
    fullHero: Optional[str] = Field(
        None,
        description='URL of uploaded hero image',
        example='https://s3bucketlocation/business-name/hero.png',
    )
    icon: Optional[str] = Field(
        None,
        description='URL of uploaded icon image',
        example='https://s3bucketlocation/business-name/icon.png',
    )
    thumbnail: Optional[str] = Field(
        None,
        description='URL of uploaded thumbnail image',
        example='https://s3bucketlocation/business-name/thumbnail.png',
    )


class TemplateNotificationFields(BaseModel):
    appleFieldPosition: Optional[float] = Field(
        None, description='Position of the Apple Field', example=0
    )
    userCanEdit: Optional[bool] = Field(None, description='User can edit or not', example=True)
    appleChangeMessage: Optional[str] = Field(
        None, description='Apple Change Message', example='abcde'
    )
    appleDateStyle: Optional[str] = Field(
        None, description='Style of the Apple Date', example='NOT_USED'
    )
    fieldLabel: Optional[str] = Field(None, description='Label of the Field', example='test label')
    googleFieldType: Optional[str] = Field(
        None, description='Field Type in Google', example='MESSAGES'
    )
    appleTimeStyle: Optional[str] = Field(
        None, description='Style of the apple Time', example='NOT_USED'
    )
    fieldValue: Optional[str] = Field(None, description='Value of the Field', example='test value')
    appleFieldType: Optional[str] = Field(
        None, description='Type of the Apple Field', example='BACK_FIELD'
    )
    appleAttributedValue: Optional[str] = Field(
        None,
        description='Overrides the apple field value key, can contain HTML a tags',
        example="<a href='http://google.com'>Google</a>",
        title='Apple Attributed Value',
    )
    appleIgnoreTimeZone: Optional[bool] = Field(
        False,
        description='Optional. Always display the time and date in the given time zone, not in the user’s current time zone. The default value is false.',
        example=True,
        title='Apple Ignore Time Zone',
    )
    appleIsRelativeDate: Optional[bool] = Field(
        False,
        description='Optional. If true, the label’s value is displayed as a relative date; otherwise, it is displayed as an absolute date. The default value is false.',
        example=True,
        title='Apple Relative Date',
    )
    appleTextAlignment: Optional[AppleTextAlignment] = Field(
        'PKTextAlignmentNatural',
        description='Optional argument that sets the text alignment of the field text. This value is not allowed on primary or back fields.',
        example='PKTextAlignmentRight',
        title='Apple Text Alignment',
    )


class Status4(Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'
    DELETED = 'DELETED'


class TemplateResponse(BaseModel):
    id: Optional[str] = Field(
        None, description='Id of the template', example='V1StGXR8_Z5jdHi6B-myT'
    )


class TemplateWalletSettings(BaseModel):
    passType: Optional[str] = Field(None, description='Type of the Pass', example='LOYALTY')


class UIPageSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    logoUrl: Optional[AnyUrl] = Field(
        None, description='URL of the logo', example='https://host/logo.jpg'
    )
    disableQRCode: Optional[bool] = Field(None, description='Disable QR code', example=False)
    redirectUrl: Optional[AnyUrl] = Field(
        None, description='URL to redirect to after sign up', example='https://host/redirect'
    )
    autoDownloadText: Optional[str] = Field(
        None,
        description='Text for the qrRedirect screen',
        example='Your download should start automatically. Alternatively you can start the download below.',
    )
    orText: Optional[str] = Field(
        None, description='OR text for the qrRedirect screen', example='OR'
    )
    qrText: Optional[str] = Field(
        None,
        description='Text for the directing the user to scan the QR code',
        example='Add to wallet by scanning the QR code',
    )
    footerText: Optional[str] = Field(
        None,
        description='Text for the directing the user to scan the QR code',
        example='This QR code is a link to download your digital pass, not the pass itself.',
    )
    backgroundColour: Optional[str] = Field(
        None, description='Background colour of the page', example='#FFFFFF'
    )
    textColour: Optional[str] = Field(
        None, description='Text colour of the page', example='#000000'
    )
    faviconPath: Optional[str] = Field(
        None, description='Path to the favicon image', example='/path/to/favicon.ico'
    )
    documentTitle: Optional[str] = Field(
        None, description='Title of the document', example='Please enter your title'
    )


class CardPayload(BaseModel):
    class Config:
        extra = Extra.allow

    exampleProperty: Optional[str] = Field(
        None, description='Example card property, properties are predefined in the card template'
    )


class UpdateCardResponse(BaseModel):
    class Config:
        extra = Extra.allow

    cardOwnerUpdate: Optional[Dict[str, Any]] = Field(
        None, description='Updated fields on the card owner'
    )
    cardDataFieldUpdate: Optional[Dict[str, Any]] = Field(
        None, description='Updated fields on the card'
    )
    success: Optional[bool] = Field(
        None, description='Returns whether the request was successful', example=True
    )


class UpdateProfileBody(BaseModel):
    businessName: Optional[str] = Field(None, description='Business name', example='Cryo gym')
    subBusinessName: Optional[str] = Field(
        None, description='Name to show on sub business selection', example='Cryo gym - Sub 1'
    )
    email: Optional[str] = Field(None, description='Business email', example='Ankus Fang')
    postCode: Optional[str] = Field(None, description='Business postcode', example='CryoGym')
    state: Optional[str] = Field(
        None, description='Business state', example='AHVW1qv4I_Teqdu4VjwMA'
    )
    logoImage: Optional[str] = Field(
        None, description='Business logo image file', example='CryoGym'
    )
    templateCount: Optional[float] = Field(
        None, description='Current total number of templates a user has.', example='3'
    )
    templateLimit: Optional[float] = Field(
        None,
        description='Maximum amount of templates this user can have. A templateLimit of -1 means the user can have unlimited templates.',
        example='12',
    )
    createdAt: Optional[str] = Field(
        None,
        description='Date when pass was first created, in ISO-8601 format',
        example='2021-08-11T03:15:56.860Z',
    )
    updatedAt: Optional[str] = Field(
        None,
        description='Date when pass was last updated, in ISO-8601 format',
        example='2021-08-1T03:15:56.860Z',
    )


class User(BaseModel):
    roles: List[str] = Field(..., example=['admin', 'editor'])
    apiAccessAllowed: bool = Field(..., example=True)
    uiDashboardAccess: List[str] = Field(..., example=['overview', 'settings'])
    picture: str = Field(..., example='https://example.com/avatar.jpg')
    username: str = Field(..., example='john_doe')
    email: str = Field(..., example='john@example.com')
    createdAt: str = Field(..., example='2024-01-10T08:00:00.000Z')
    lastLoginAt: str = Field(..., example='2024-05-18T12:30:00.000Z')


class ValidatePasswordBody(BaseModel):
    formId: str = Field(..., description='Id for field input form', example='V1StGXR8_Z5jdHi6B-myT')
    password: str = Field(..., description="User's input password", example='password123')


class AuthenticationRequestBody(BaseModel):
    username: Optional[str] = Field(None, description='Credential: username', example='user1')
    password: Optional[str] = Field(
        None, description='Credential: password', example='Ex@Mple5P@ssW0rd'
    )


class AuthenticationResponse(BaseModel):
    access_token: Optional[str] = Field(None, description='JWT Token used for API authentication')
    type: Optional[str] = Field(None, description='Type of Token', example='Bearer')
    expires_in: Optional[float] = Field(
        None, description='Time in seconds before token expires', example=3600
    )


class ResponseBody(BaseModel):
    message: Optional[str] = None


class AppleAppLinkingSettings(BaseModel):
    storeIdentifier: Optional[float] = Field(None, description='App Store Identifier')


class AppleDateTimeStyleV1(Enum):
    NOT_USED = 'NOT_USED'
    NONE = 'NONE'
    SHORT = 'SHORT'
    MEDIUM = 'MEDIUM'
    LONG = 'LONG'
    FULL = 'FULL'


class AppleNumberStyleV1(Enum):
    NOT_USED = 'NOT_USED'
    DECIMAL = 'DECIMAL'
    PERCENT = 'PERCENT'
    SCIENTIFIC = 'SCIENTIFIC'
    SPELLOUT = 'SPELLOUT'


class Type1(Enum):
    BUSINESS_CARD = 'BUSINESS_CARD'
    GENERIC = 'GENERIC'
    COUPON = 'COUPON'
    EVENT_TICKET = 'EVENT_TICKET'


class Mailchimp(BaseModel):
    accessToken: Optional[str] = Field(
        None, description='Access token for Mailchimp API', example='__access_token__'
    )
    fromEmail: Optional[EmailStr] = Field(
        None, description='Email address to send from using Mailchimp', example='news@corplite.com'
    )
    server: Optional[str] = Field(None, description='Mailchimp server prefix', example='us14')


class Count(BaseModel):
    failed: Optional[float] = Field(None, example=0)
    invalid: Optional[float] = Field(None, example=2)
    skipped: Optional[float] = Field(None, example=0)
    created: Optional[float] = Field(None, example=1)
    updated: Optional[float] = Field(None, example=1)
    total: Optional[float] = Field(None, example=3)
    valid: Optional[float] = Field(None, example=1)


class Status5(Enum):
    PARSING_ERROR = 'PARSING_ERROR'
    RECORD_COUNT_EXCEEDED = 'RECORD_COUNT_EXCEEDED'
    PENDING = 'PENDING'
    VALIDATION_COMPLETE = 'VALIDATION_COMPLETE'
    COMPLETED = 'COMPLETED'


class CardUploadGroupV1(BaseModel):
    id: str = Field(..., example='group-id')
    businessId: str = Field(..., example='business-id')
    count: Count = Field(
        ..., description='valid + invalid = total and valid = created + updated + failed + skipped'
    )
    createdAt: str = Field(..., example='2024-05-30T06:53:18.700Z')
    fileName: str = Field(..., example='cards.csv')
    overrideExisting: bool = Field(..., example=True)
    status: Status5 = Field(..., example='COMPLETED')
    templateId: str = Field(..., example='template-id')


class Status6(Enum):
    QUEUED = 'QUEUED'
    PROCESSING = 'PROCESSING'
    CREATED = 'CREATED'
    UPDATED = 'UPDATED'
    FAILED = 'FAILED'
    SKIPPED = 'SKIPPED'
    VALIDATION_FAILED = 'VALIDATION_FAILED'


class CardUploadV1(BaseModel):
    id: str = Field(..., example='id')
    businessId: str = Field(..., example='business-id')
    cardId: Optional[str] = Field(None, example='card12345')
    cardPayload: Optional[Dict[str, Any]] = Field(
        None,
        description='Generic card payload with unspecified fields',
        example={'email': '123214312', 'firstName': 'Nimesh', 'lastName': 'Jayamanne'},
    )
    createdAt: str = Field(..., example='2024-05-30T06:45:02.736Z')
    errors: Optional[List[str]] = None
    recordIndex: float = Field(..., example=2)
    status: Status6 = Field(..., example='VALIDATION_FAILED')
    templateId: str = Field(..., example='template-id')


class CertificateUploadV1(BaseModel):
    certificate: str = Field(
        ..., description='base64 encoded certificate', example='MIIGEDCCBPigAwIBAgIQL...=='
    )
    description: Optional[str] = Field(None, description='A description about the certificate')


class ColumnValues(BaseModel):
    title: Optional[str] = Field(None, description='Readable label for column Value')
    value: Optional[str] = Field(None, description='Column value property that matches db entry')


class SamsungFont(Enum):
    field_000000 = '#000000'
    ffffff = '#ffffff'


class Colours(BaseModel):
    background: str = Field(..., description='Background colour of the pass', example='#ffffff')
    label: str = Field(..., description='Label colour of the apple pass', example='#ffffff')
    foreground: str = Field(..., description='Text colour of the apple pass', example='#ffffff')
    strip: Optional[str] = Field(
        None, description='Text colour on top of strip image of the apple pass', example='#ffffff'
    )
    samsungBlink: Optional[str] = Field(
        None,
        description='Colour of the blinking indicating area in samsung wallet',
        example='#00ffaa',
    )
    samsungFont: Optional[SamsungFont] = Field(
        None, description='Colour of the font on the Samsung card'
    )


class Images(BaseModel):
    logo: str = Field(
        ...,
        description='URL of uploaded a logo image (square), used by Apple, Google & Samsung, 300px by 300px.',
        example='https://s3bucketlocation/business-name/logo.png',
    )
    logoDarkMode: Optional[str] = Field(
        None,
        description='URL of uploaded a logo image (square), used by Samsung, 300px by 300px. Used specifically for dark mode.',
        example='https://s3bucketlocation/business-name/logo.png',
    )
    logoLightMode: Optional[str] = Field(
        None,
        description='URL of uploaded a logo image (square), used by Samsung, 300px by 300px. Used specifically for light mode.',
        example='https://s3bucketlocation/business-name/logo.png',
    )
    hero: Optional[str] = Field(
        None,
        description='URL of uploaded hero image, used by Google. 1032px x 336px',
        example='https://s3bucketlocation/business-name/hero.png',
    )
    strip: Optional[str] = Field(
        None,
        description="URL of uploaded strip image, used by Apple. 1125px by 432px. Will overwrite Apple's thumbnail image.",
        example='https://s3bucketlocation/business-name/hero.png',
    )
    appleLogoOverride: Optional[str] = Field(
        None,
        description='URL of uploaded logo image used by Apple. This will replace the shared logo image. 150px height with max width of 480px',
        example='https://s3bucketlocation/business-name/hero.png',
    )
    icon: str = Field(
        ...,
        description='URL of uploaded icon image, used by Apple',
        example='https://s3bucketlocation/business-name/icon.png',
    )
    thumbnail: Optional[str] = Field(
        None,
        description='URL of uploaded thumbnail image. 270px by 270px. Only available on Apple Event Ticket and Generic card types and certain Samsung Card Types.',
        example='https://s3bucketlocation/business-name/thumbnail.png',
    )
    background: Optional[str] = Field(
        None,
        description='URL of uploaded background image. 270px by 270px. Only available on Apple Event Ticket card types',
        example='https://s3bucketlocation/business-name/background.png',
    )


class Type3(Enum):
    NOT_USED = 'NOT_USED'
    QR_CODE = 'QR_CODE'
    CODE_128 = 'CODE_128'
    PDF_417 = 'PDF_417'
    AZTEC = 'AZTEC'


class Barcode(BaseModel):
    barcodeValue: str = Field(..., description='Value of the Barcode', example='4805723345')
    messageEncoding: Optional[str] = Field(
        None, description='Message Encoding of the Barcode', example='iso-8859-1'
    )
    type: Type3 = Field(..., description='Type of the Barcode', example='CODE_128')
    altText: str = Field(
        ...,
        description='Displayed alternative value at the bottom of the barcode',
        example='1231244',
    )
    fieldMap: Optional[str] = Field(
        None,
        description='If barcodeValue is set to ${CUSTOM}. fieldMap must be present to identify which field the barcodeValue should be set from.',
        example='memberId',
    )


class DatabaseMetaData(BaseModel):
    createdAt: Optional[str] = Field(
        None, description='Record creation date', example='2021-08-11T03:15:56.860Z'
    )
    updatedAt: Optional[str] = Field(
        None, description='Record update date', example='2021-08-1T03:15:56.860Z'
    )
    createdBy: Optional[str] = Field(None, description='User Id of the creator', example='abc123')


class DeleteScanV1ResponseSchema(BaseModel):
    scanId: str = Field(..., description='Scan ID', example='25dgjks2q3kqqha')


class EmailTemplate(Enum):
    litecardpass = 'litecardpass'
    table_tennis = 'table-tennis'
    tarfish = 'tarfish'
    tarfish_form = 'tarfish-form'
    cx3 = 'cx3'
    tt_reminder = 'tt-reminder'
    mubc = 'mubc'
    muttc = 'muttc'


class EmailRemindersRequestBody(BaseModel):
    templateId: Optional[str] = Field(
        None,
        description="Template of the cards you want to send reminder to. If value not provided, will send to all passes that haven't been activated.",
        example='test_business',
    )
    emailTemplate: EmailTemplate = Field(
        ..., description='Select which email template option to use.', example='litecardpass'
    )


class TableName1(Enum):
    cardsTable = 'cardsTable'
    scansTable = 'scansTable'
    SCAN_TABLE = 'SCAN_TABLE'
    notificationGroupsTable = 'notificationGroupsTable'


class ExportCsvV1RequestBody(BaseModel):
    tableName: Optional[TableName1] = Field(
        None,
        description='The name of the front end table that is to be exported',
        example='SCAN_TABLE',
    )
    startDateTime: Optional[str] = Field(
        None, description='StartDateTime of the exporting data', example='2022-02-04T06:22:37.773Z'
    )
    endDateTime: Optional[str] = Field(
        None, description='EndDateTime of the exporting data', example='2022-02-04T06:22:37.773Z'
    )
    templateId: Optional[str] = Field(
        None, description='Id of the template to be exported', example='template-123'
    )


class ExternalCallbackV1(BaseModel):
    class Config:
        extra = Extra.allow

    type: Optional[str] = Field(None, description='Status of the callback')


class Type4(Enum):
    text = 'text'
    radio = 'radio'
    select = 'select'
    phone = 'phone'
    textArea = 'textArea'
    number = 'number'
    date = 'date'
    dateTime = 'dateTime'
    image = 'image'
    nationality = 'nationality'


class Rule1(Enum):
    required = 'required'
    phone = 'phone'
    email = 'email'
    integer = 'integer'


class MappingType(Enum):
    CARD_OWNER = 'CARD_OWNER'
    CARD_OWNER_AND_CARD = 'CARD_OWNER_AND_CARD'
    CARD = 'CARD'


class Option1(BaseModel):
    title: str = Field(..., description='Label for the option', example='Casual')
    value: str = Field(..., description='Value for the option', example='templateId')


class FormFieldsV1(BaseModel):
    type: Type4
    format: Optional[str] = Field(
        None, description='Format of the field', example='DD/MM/YYYY for date inputs'
    )
    label: str = Field(
        ..., description='The label of the field on the card/form', example='First Name'
    )
    helpText: Optional[str] = Field(
        None,
        description='Help text to be displayed next to the field label',
        example='Date the member joined',
    )
    name: str = Field(..., description='Unique key', example='firstName')
    rules: List[Rule1] = Field(..., description='Validation rules that will be run on this field')
    usage: Optional[FormFieldUsage] = None
    mappingType: Optional[MappingType] = Field(
        None,
        description='Determines if this field is mapped from form to card or cardowner or both',
        example=True,
    )
    value: Optional[Union[str, float]] = None
    placeholder: Optional[str] = Field(None, description='Place holder text', example='Full Name')
    defaultCountryCode: Optional[str] = Field(
        None, description='Default country code for phone number', example='au'
    )
    options: Optional[List[Option1]] = Field(None, description='List of options for drop down list')


class Style3(BaseModel):
    bgPrimary: Optional[str] = Field(
        None, description='Primary colour for the form background', example='#1890ff'
    )
    bgSecondary: Optional[str] = Field(
        None, description='Secondary colour for the form background', example='#1890ff'
    )
    btnPrimary: Optional[str] = Field(
        None, description='Secondary colour for the button', example='#1890ff'
    )
    btnSecondary: Optional[str] = Field(
        None, description='Secondary colour for the button', example='#1890ff'
    )
    label: Optional[str] = Field(
        None, description='Label colour for Apple Passes', example='#f1f0f2'
    )
    customCssLinks: Optional[List[str]] = Field(None, description='List of custom css links')


class Status7(Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'
    DELETED = 'DELETED'


class GoogleAppLinkingSettings(BaseModel):
    title: Optional[str] = Field(None, description='Title for the App')
    appLogo: Optional[str] = Field(None, description='URL to the logo of the app')
    appUri: Optional[str] = Field(
        None, description='URL to the app. Recommended to use a dynamic Link'
    )
    description: Optional[str] = Field(None, description='Description of the app')


class ListCertificatesResponseV1(BaseModel):
    name: str = Field(..., description='Name of the certificate')
    applePassTypeIdentifier: Optional[str] = Field(
        None, description='Pass Type Identifier (APPLE only)', example='pass.com.example.test'
    )
    appleTeamIdentifier: Optional[str] = Field(
        None, description='Team identifier (APPLE only)', example='ABCDE12345'
    )
    type: str = Field(..., description='Type of pass', example='APPLE')
    expiryDate: str = Field(
        ..., description='Timestamp of when pass will expire', example='2023-01-01T00:00:00.000Z'
    )


class ListPassOfCardOwnerRequestV1(BaseModel):
    email: Optional[str] = Field(None, description='Email of Card Owner')
    phone: Optional[str] = Field(None, description='Phone number of Card Owner')


class ListPassRequestV1(BaseModel):
    next: Optional[str] = Field(None, description='Next key for dynamoDB query')
    projectionExpression: Optional[str] = Field(
        None, description='What keys to get inside card table'
    )


class MailchimpTagSettings(BaseModel):
    value: Optional[str] = Field(
        None, description='Used if value is static. Value of the tag to be applied.'
    )
    fieldMap: Optional[str] = Field(
        None, description='If value is not static, map it to a specific form field'
    )
    static: Optional[bool] = Field(
        None,
        description="If the value is static across all passes or if it's dynamic based on pass",
    )


class Type5(Enum):
    EMAIL = 'EMAIL'
    PUSH_NOTIFICATION = 'PUSH_NOTIFICATION'


class Platform(Enum):
    apple = 'apple'
    google = 'google'


class SentViaItem(BaseModel):
    type: Type5 = Field(..., description='The method used for sending the notification')
    count: conint(ge=0) = Field(..., description='Number of notifications sent using the method')
    platform: Optional[Platform] = Field(
        None, description='Platform used for sending the notification'
    )
    successCount: Optional[conint(ge=0)] = Field(
        None, description='Number of successful notifications sent'
    )
    failedCount: Optional[conint(ge=0)] = Field(None, description='Number of failed notifications')


class Status8(Enum):
    PENDING = 'PENDING'
    SENT = 'SENT'
    IN_PROGRESS = 'IN_PROGRESS'
    FAILED = 'FAILED'
    CANCELLED = 'CANCELLED'
    QUEUED = 'QUEUED'


class NotificationGroup(BaseModel):
    id: Optional[str] = Field(None, description='Unique identifier for the notification group')
    title: Optional[str] = Field(None, description='Title of the notification group')
    message: Optional[str] = Field(None, description='Message content of the notification group')
    participantsCount: Optional[int] = Field(
        None, description='Number of participants in the notification group'
    )
    sentVia: Optional[List[SentViaItem]] = Field(
        None,
        description='Array of objects detailing the count of notifications sent via each method',
    )
    sendTime: Optional[datetime] = Field(
        None, description='Creation date and time of the notification group'
    )
    createdAt: Optional[datetime] = Field(
        None, description='Creation date and time of the notification group'
    )
    status: Optional[Status8] = Field(None, description='Current status of the notification group')
    businessId: Optional[str] = Field(
        None, description='ID of the business that owns the notification group'
    )


class NotificationSegments(BaseModel):
    segment1: Optional[List[str]] = Field(None, description='List of segment values')
    segment2: Optional[List[str]] = Field(None, description='List of segment values')
    segment3: Optional[List[str]] = Field(None, description='List of segment values')
    segment4: Optional[List[str]] = Field(None, description='List of segment values')
    segment5: Optional[List[str]] = Field(None, description='List of segment values')


class Trigger(Enum):
    AFTER_CREATION = 'AFTER_CREATION'


class Type6(Enum):
    PN = 'PN'


class NotificationSettings(BaseModel):
    validStartDate: Optional[str] = Field(
        None, description='Start date where this notification is valid'
    )
    validEndDate: Optional[str] = Field(
        None, description='End date where this notification is valid'
    )
    trigger: Trigger = Field(..., description='Notification trigger type')
    delay: Optional[float] = Field(
        None, description='User key to be used to retrieve client credentials and verify owner'
    )
    type: Type6 = Field(..., description='What rule the coupon should be using')
    dataFieldKey: Optional[str] = Field(
        None, description='Key of the push notification field. Default: notificationKey'
    )
    title: str = Field(..., description='Title of the push notification')
    message: str = Field(..., description='Message contents of the push notifications')


class Notification(BaseModel):
    title: str = Field(
        ..., description='Title of push notification', example='Litecard - Notification'
    )
    message: str = Field(
        ..., description='Body message of push notification', example='Welcome to Litecard'
    )
    dataFieldKey: str = Field(
        ...,
        description='Key of data field used to store push notification in digital wallet card',
        example='notificationKey',
    )
    sendTime: Optional[str] = Field(
        None,
        description='Time to send the notification. Uses UTC time.',
        example='2022-11-07T04:31:15.246Z',
    )


class Options(BaseModel):
    email: Optional[bool] = Field(False, description='Send email notification')
    emailType: Optional[EmailType] = Field(
        'STANDARD',
        description='Optional. Senders email address, standard is used for most cases unless a marketing email address has been set up',
    )
    pushNotification: bool = Field(..., description='Send push notification')
    sendAll: Optional[bool] = Field(False, description='Send to all active users within business')


class NotificationV1(BaseModel):
    cardIds: List[str] = Field(..., description='Array of cardIds to send push notifications to')
    notification: Notification
    segments: Optional[NotificationSegments] = None
    templateIds: Optional[List[str]] = Field(
        None, description='Array of card template ids to send notifications to'
    )
    options: Optional[Options] = None


class PassCountDetailsForTemplate(BaseModel):
    downloadedApplePassCount: Optional[int] = Field(
        None, description='The count of Apple passes downloaded for this business.'
    )
    downloadedGooglePassCount: Optional[int] = Field(
        None, description='The count of Google passes downloaded for this business.'
    )
    deletedApplePassCount: Optional[int] = Field(
        None, description='The count of Apple passes downloaded for this business.'
    )
    deletedGooglePassCount: Optional[int] = Field(
        None, description='The count of Google passes downloaded for this business.'
    )
    cardsCount: Optional[int] = Field(
        None, description='The count of cards created during this duration.'
    )
    downloadsCount: Optional[int] = Field(
        None, description='The count of card downloads for this business.'
    )
    activeCardsCount: Optional[int] = Field(
        None, description='The count of active cards created during this duration.'
    )
    deletedCardsCount: Optional[int] = Field(
        None, description='The count of deleted cards created during this duration.'
    )
    inactiveCardsCount: Optional[int] = Field(
        None, description='The count of inactive cards created during this duration.'
    )
    inactiveApplePassCount: Optional[int] = Field(
        None, description='The count of inactive Apple passes for this business.'
    )
    inactiveGooglePassCount: Optional[int] = Field(
        None, description='The count of inactive Google passes for this business.'
    )
    paymentsRequiredCount: Optional[int] = Field(
        None, description='The count of passes payments is not yet completed for this business.'
    )


class Duration(Enum):
    PAST_7_DAYS = 'PAST_7_DAYS'
    PAST_30_DAYS = 'PAST_30_DAYS'
    ALL = 'ALL'


class PassCountsForTemplate(BaseModel):
    templateId: Optional[str] = Field(
        None,
        description='Id of the template for which the pass counts are retrieved',
        example='template-123',
    )
    duration: Optional[Duration] = Field(
        None, description='Duration for which the pass counts are retrieved'
    )
    passCounts: Optional[PassCountDetailsForTemplate] = None


class PassTrendDetails(BaseModel):
    date: str = Field(..., description='The date for the pass trend.(YYYY-MM-DD)')
    downloadedApplePassCount: int = Field(
        ..., description='The count of Apple passes downloaded for this business.'
    )
    downloadedGooglePassCount: int = Field(
        ..., description='The count of Google passes downloaded for this business.'
    )
    deletedApplePassCount: Optional[int] = Field(
        None, description='The count of Apple passes downloaded for this business.'
    )
    deletedGooglePassCount: Optional[int] = Field(
        None, description='The count of Google passes downloaded for this business.'
    )
    cardsCount: Optional[int] = Field(
        None, description='The count of cards created during this duration.'
    )
    downloadsCount: Optional[int] = Field(
        None, description='The count of card downloads for this duration.'
    )
    activeCardsCount: Optional[int] = Field(
        None, description='The count of active cards created during this duration.'
    )
    deletedCardsCount: Optional[int] = Field(
        None, description='The count of deleted cards created during this duration.'
    )
    inactiveCardsCount: Optional[int] = Field(
        None, description='The count of inactive cards created during this duration.'
    )
    inactiveApplePassCount: Optional[int] = Field(
        None, description='The count of inactive Apple passes for this business.'
    )
    inactiveGooglePassCount: Optional[int] = Field(
        None, description='The count of inactive Google passes for this business.'
    )
    paymentsRequiredCount: Optional[int] = Field(
        None, description='The count of passes payments is not yet completed for this business.'
    )


class PublicRedeemRequestBody(BaseModel):
    barcodeValue: str = Field(..., description='barcode value from pass', example='1234567890')
    businessId: str = Field(
        ..., description='ID of the business that owns the pass', example='R9xh12dga8i'
    )
    updatePayload: Dict[str, Any] = Field(..., description='Update payload')


class PublicScanBarcodeV1RequestBody(BaseModel):
    barcodeValue: str = Field(..., description='barcode value from pass', example='1234567890')
    businessId: str = Field(
        ..., description='ID of the business that owns the pass', example='R9xh12dga8i'
    )


class LimitType(Enum):
    INTERVAL = 'INTERVAL'


class Rule2(BaseModel):
    duration: Optional[float] = Field(
        None, description='Time Duration for the limit and unit is seconds', example=300
    )
    count: Optional[float] = Field(None, description='Numbers of limit count', example=10)


class RateLimitV11(BaseModel):
    enabled: Optional[bool] = Field(
        None, description='The rateLimit is enabled / disabled for this template', example=True
    )
    limitType: Optional[LimitType] = Field(
        None, description='Type of Rate Limit either INTERVAL or DATE', example='INTERVAL'
    )
    rule: Optional[Rule2] = None


class LimitType1(Enum):
    DATE = 'DATE'


class DateLimit(BaseModel):
    amount: Optional[str] = Field(
        None, description='The amount of time between scan periods.', example='10'
    )
    measurement: Optional[Measurement] = Field(
        None,
        description='The unit of measurement to calculate between scan periods.',
        example='YEARS',
    )


class Rule3(BaseModel):
    dateLimit: Optional[DateLimit] = None


class RateLimitV12(BaseModel):
    enabled: Optional[bool] = Field(
        None, description='The rateLimit is enabled / disabled for this template', example=True
    )
    limitType: Optional[LimitType1] = Field(
        None, description='Type of Rate Limit either INTERVAL or DATE', example='DATE'
    )
    rule: Optional[Rule3] = None


class RateLimitV1(BaseModel):
    __root__: Union[RateLimitV11, RateLimitV12] = Field(..., description='Card Scan Rate Limits')


class RegisterBusinessResponse(BaseModel):
    businessId: Optional[str] = Field(None, description='Id of the business', example='Litecard')


class ScanBarcodeV1RequestBody(BaseModel):
    barcodeValue: str = Field(..., description='barcode value from pass', example='1234567890')


class Status9(Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'
    DELETED = 'DELETED'
    RESERVED = 'RESERVED'
    ERROR = 'ERROR'


class Card2(BaseModel):
    id: Optional[str] = Field(None, description='ID of the Pass', example='7048582966')
    downloadId: Optional[str] = Field(
        None, description='DownloadId used for landing page', example='V1StGXR8_Z5jdHi6B-myT'
    )
    appleLink: Optional[str] = Field(
        None,
        description='Url for the apple pass',
        example='https://litecard-demo-pkpass.s3-ap-southeast-2.amazonaws.com/coldbrew.pkpass',
    )
    businessId: Optional[str] = Field(None, description='ID of the Business', example='business123')
    userType: Optional[str] = Field(None, description='Type of User', example='employee')
    createdAt: Optional[str] = Field(
        None, description='Date Time card was created', example='2021-11-05T04:25:42.676Z'
    )
    googlePassId: Optional[str] = Field(None, description='Id of google pass', example='1231244')
    authToken: Optional[str] = Field(
        None, description='Internal Use Only. Apple Device Auth Token', example='dscxdsf234'
    )
    passType: Optional[str] = Field(None, description='Mobile wallet pass type', example='VISIT')
    googleLink: Optional[str] = Field(
        None, description='Url of google pass', example='https://pay.google.com...'
    )
    samsungLink: Optional[str] = Field(
        None,
        description='Url of samsung pass',
        example='https://a.swallet.link/atw/656147182764415319#Clip?pdata=sIgHCzIwM9g',
    )
    templateId: str = Field(
        ..., description='Id for the template used to create the card', example='test_business'
    )
    dataFields: Optional[DataFields4] = None
    formId: str = Field(..., description='Id for field input form', example='00000001')
    updatedAt: Optional[str] = Field(None, description='', example='2021-11-05T04:25:42.676Z')
    pkPassId: Optional[str] = Field(
        None, description='Id of Apple Pass', example='pass.au.com.litecard.dev.q124234'
    )
    barcodeValue: Optional[str] = Field(
        None, description='what the barcode value is', example='5434435'
    )
    appleStatus: Optional[str] = Field(
        None, description='Status of card inside of Apple Wallet', example='ACTIVE'
    )
    googleStatus: Optional[str] = Field(
        None, description='Status of card inside of Google Wallet', example='INACTIVE'
    )
    cardOwnerId: Optional[str] = Field(None, description='Id of the card owner', example='asb123')
    status: Optional[Status9] = Field(
        None, description='Activation Status of the card', example='INACTIVE'
    )
    expiry: Optional[str] = Field(
        None, description='Expiry of card, in ISO-8601 format', example='2021-08-11T03:15:56.860Z'
    )
    barcodeLink: Optional[str] = Field(
        None, description='Link to the barcode image', example='https://example.com/blah.png'
    )
    cardOwnerCopy: Optional[CardOwnerCopy] = Field(
        None, description="A copy of the card owner's information"
    )
    disableQR: Optional[bool] = Field(
        None, description='Disable QR code on Welcome Page', example=True
    )
    stripeCustomerId: Optional[str] = Field(
        None, description='stripeCustomerId for subscription passes', example='str_123'
    )
    disableDownload: Optional[bool] = Field(
        None,
        description='Disable download link if pass is already activated. Default: false',
        example=True,
    )


class ScanV1ResponseSchema(BaseModel):
    card: Card2
    cardOwner: CardOwner1 = Field(..., description='Fields that are returned for each card owner')


class ScheduleTaskV1(BaseModel):
    executeAt: str = Field(..., description='When to schedule the task')
    googleServiceAccount: Optional[str] = Field(
        None,
        description='Google Service Account to use for any Google related actions',
        example='google-service-account@litecard-example.iam.gserviceaccount.com',
    )
    csvIds: List[str] = Field(..., description='CSV IDs to schedule task for', example='abc')


class PrimaryContact(Enum):
    EMAIL = 'EMAIL'
    SMS = 'SMS'
    EMAIL_SMS = 'EMAIL_SMS'


class ExternalProvider(Enum):
    SQUARE = 'SQUARE'
    LITECARD = 'LITECARD'
    ZII_POS = 'ZII_POS'
    CIRCLES = 'CIRCLES'
    SHOPIFY = 'SHOPIFY'


class SettingsV1(BaseModel):
    paymentRequired: Optional[bool] = Field(
        None, description='If card creation requires payment', example=False
    )
    enforceUniqueEmail: Optional[bool] = Field(
        None, description='Only allow one email address per template', example=False
    )
    enforceUniquePhone: Optional[bool] = Field(
        None, description='Only allow one phone number per template', example=False
    )
    resendForUniqueEmail: Optional[bool] = Field(
        None, description='Resend card if email is unique', example=False
    )
    resendForUniquePhone: Optional[bool] = Field(
        None, description='Resend card if phone is unique', example=False
    )
    timezone: Optional[str] = Field(
        None,
        description='Timezone used for displaying dates and times on the pass. Default is UTC',
        example='Australia/Melbourne',
    )
    sourceEmail: Optional[SourceEmail] = Field(
        None,
        description='IF not using default from domain, specify what from address to use',
        example='tarfish@litecard.io',
    )
    emailTemplate: Optional[str] = Field(
        None, description='Email template used when creating a new card', example='litecardpass'
    )
    emailSubject: Optional[str] = Field(
        None,
        description='The subject of the Invitation email sent when a pass is generated',
        example='Welcome to Litecard',
    )
    formPassword: Optional[str] = Field(None, description='Form Password', example='Litecard2023')
    smsTemplate: Optional[str] = Field(
        None, description='SMS template used when creating a new card', example='litecardpass'
    )
    disableBacklink: Optional[bool] = Field(
        None, description='Disable backlink trackining. Default is enabled', example=True
    )
    barcodeImage: Optional[bool] = Field(
        None, description='Provides an image alternative of the barcode', example=True
    )
    tacURL: Optional[str] = Field(
        None,
        description='Use this if client requires an alternative terms and conditions link',
        example='https://example.com',
    )
    hideForm: Optional[bool] = Field(
        None, description='Hide this Form from the private create card page', example=True
    )
    disableQR: Optional[bool] = Field(
        None, description='Disable QR code on Download page', example=True
    )
    primaryContact: Optional[PrimaryContact] = Field(
        None, description='Preferred medium to use when sending invitation emails', example='SMS'
    )
    externalProvider: Optional[ExternalProvider] = Field(
        None, description='External Provider', example='SQUARE'
    )
    disableDownload: Optional[bool] = Field(
        None,
        description='Option to disable download page if pass is active. Default: false',
        example=True,
    )
    quickSignUp: Optional[bool] = Field(
        None, description='Option to enable quick sign up for card creation', example=True
    )
    isDeduplicateDeviceAndIp: Optional[bool] = Field(
        None,
        description='Option to remove creating duplicate passes for quick signup forms. (Applicable only quickSignUp is true)',
        example=True,
    )
    externalSystemConfig: Optional[Dict[str, str]] = Field(
        None,
        description='External System Configuration',
        example={'configKey1': 'configValue1', 'configKey2': 'configValue2'},
    )
    disableInvitationEmail: Optional[bool] = Field(
        None,
        description='Option to disable Invitation Email being sent. This will override the option inside options payload',
        example=True,
    )
    disableInvitationSMS: Optional[bool] = Field(
        None,
        description='Option to disable Invitation Phone being sent. This will override the option inside options payload.',
        example=True,
    )
    multiTier: Optional[bool] = Field(
        None,
        description='Flag to notify whether this template has multiple tier options',
        example=True,
    )


class ShopfifySettings(BaseModel):
    generateCoupon: Optional[bool] = Field(None, description='Generate Coupon on Card Creation')
    client: Optional[str] = Field(
        None, description='User key to be used to retrieve client credentials and verify owner'
    )
    ruleId: Optional[float] = Field(None, description='What rule the coupon should be using')


class SocialMedia(BaseModel):
    platform: Optional[str] = Field(None, description='Social Media Platform', example='Facebook')
    link: Optional[str] = Field(
        None, description='URL of social media profile', example='https://twitter.com/example'
    )
    handle: Optional[str] = Field(
        None, description='Username of the social media platform', example='example1'
    )


class Type7(Enum):
    LINKED = 'LINKED'
    STANDARD = 'STANDARD'


class StripeSettings(BaseModel):
    type: Optional[Type7] = Field(None, description='The Type of Stripe Flow')
    priceId: Optional[str] = Field(
        None,
        description='Stripe ID of the product the price is associated with, setting this value will require stripe checkout on card creation',
        example='price_1MfJi0CHalkCPRwLFiBsMDXW',
    )
    accountId: Optional[str] = Field(
        None, description='If user has a stripe connect account. Provide account Id here.'
    )
    paymentFee: Optional[str] = Field(
        None, description='Fee Litecard will take off from the transaction.', example='123'
    )
    paymentPerecent: Optional[str] = Field(
        None, description='Fee Litecard for subscription transactions', example='123'
    )


class Format(Enum):
    date = 'date'
    datetime = 'datetime'
    time = 'time'
    number = 'number'
    currency = 'currency'


class UsageEnum(Enum):
    CSV = 'CSV'
    UI = 'UI'


class Groups(BaseModel):
    defaultValue: Optional[str] = Field(None, description='The default value for the group')
    label: Optional[str] = Field(None, description='The label for the group')
    mappings: Optional[Dict[str, str]] = Field(
        None, description='Key-value pairs mapping strings to strings'
    )


class TableColumn(BaseModel):
    key: Optional[str] = Field(None, description='DynamoDB path to get data')
    label: Optional[str] = Field(None, description='Column Header')
    mapping: Optional[str] = Field(None, description='Map special values to the segments')
    format: Optional[Format] = Field(None, description='Format the display')
    values: Optional[List[ColumnValues]] = Field(None, description='Values for the segment')
    usage: Optional[List[UsageEnum]] = Field(
        None, description='Visibility of the column in csv export and api response'
    )
    groups: Optional[Dict[str, Groups]] = Field(
        None, description='Group specific properties, each key represents a unique group name'
    )


class CardsTable(BaseModel):
    columns: Optional[List[TableColumn]] = Field(None, description='Template Links')


class TableConfig(BaseModel):
    cardsTable: Optional[CardsTable] = None


class TemplateActionConditionV1(BaseModel):
    type: str = Field(..., description='Type of condition to be run', example='CHECK_IN')
    optional: bool = Field(
        ..., description='Condition to run action on every invocation to the endpoint', example=True
    )
    order: Optional[int] = Field(
        None, description='Order of actions to be run on each invocation', example=1
    )
    field: Optional[str] = Field(
        None, description='Field name used for conditional checking', example='points'
    )
    value: Optional[int] = Field(
        None, description='Value to be compared against during the conditional check', example=10
    )


class Modifier(Enum):
    PERCENTAGE = 'PERCENTAGE'
    DISCOUNT = 'DISCOUNT'


class PostCalc(BaseModel):
    modifier: Modifier = Field(
        ..., description='Type of calculation to be applied to the amount', example='PERCENTAGE'
    )
    amount: float = Field(
        ...,
        description='Amount to be applied. Should be the whole number (e.g. 10 for 10 percent)',
        example=10,
    )


class TemplateActionParamsV1(BaseModel):
    type: str = Field(..., description='Type of action to be executed', example='INCREMENT')
    amount: Optional[int] = Field(
        None, description='Value used in conjunction with the action', example=10
    )
    field: Optional[str] = Field(
        None, description='Field name to perform action on', example='points'
    )
    incrementAmount: Optional[int] = Field(
        None,
        description='Used with the INCREMENT_DECREMENT action, amount to be incremented by',
        example=1,
    )
    incrementField: Optional[str] = Field(
        None,
        description='Used with the INCREMENT_DECREMENT action, field to be incremented',
        example='points',
    )
    decrementAmount: Optional[int] = Field(
        None,
        description='Used with the INCREMENT_DECREMENT action, amount to be decremented by',
        example=10,
    )
    decrementField: Optional[str] = Field(
        None,
        description='Used with the INCREMENT_DECREMENT action, field to be decremented',
        example='points',
    )
    postCalc: Optional[PostCalc] = Field(
        None, description='Settings to be applied to the amount for post calculation'
    )


class Action(BaseModel):
    name: Optional[str] = Field(
        None, description='Name of the template Action to be invoked', example='addLoyalty'
    )
    amount: Optional[float] = Field(None, description='Optional. Value used in scanning logic')


class TemplateActionsRequestBody(BaseModel):
    cardId: Optional[str] = Field(
        None, description='Id for the Business that this entity belongs to', example='LiteCard'
    )
    actions: Optional[List[Action]] = None


class TemplateActionsResponseSchema(BaseModel):
    success: Optional[bool] = Field(None, description='Action successful', example=True)


class TemplateActionsV11(BaseModel):
    condition: TemplateActionConditionV1
    action: TemplateActionParamsV1
    label: Optional[str] = Field(None, description='Name of the Action', example='Redeem Burger')


class TemplateActionsV1(BaseModel):
    __root__: Optional[Dict[str, TemplateActionsV11]] = None


class TemplateAppLinking(BaseModel):
    googleSettings: Optional[GoogleAppLinkingSettings] = None
    appleSettings: Optional[AppleAppLinkingSettings] = None


class PassType(Enum):
    STORE_CARD = 'STORE_CARD'
    BOARDING_PASS = 'BOARDING_PASS'
    COUPON = 'COUPON'
    EVENT_TICKET = 'EVENT_TICKET'
    GENERIC = 'GENERIC'


class TemplateAppleWalletSettingsV1(BaseModel):
    passType: PassType = Field(..., description='Apple wallet card type', example='STORE_CARD')
    hideLogo: Optional[bool] = Field(
        None, description='Hides the logo in the top right of apple wallet cards', example=False
    )
    hideLogoText: Optional[bool] = Field(
        None, description='Hides logo text in the top right of apple wallet cards', example=False
    )
    disableSharing: Optional[bool] = Field(
        None,
        description='Disables the share button on the apple pass. This does not stop the user from taking a screenshot and sharing the pass details.',
    )


class Type8(Enum):
    NOT_USED = 'NOT_USED'
    QR_CODE = 'QR_CODE'
    CODE_128 = 'CODE_128'
    PDF_417 = 'PDF_417'
    AZTEC = 'AZTEC'


class TemplateBarcodeV1(BaseModel):
    barcodeValue: Optional[str] = Field(
        None, description='Value of the Barcode', example='4805723345'
    )
    messageEncoding: Optional[str] = Field(
        None, description='Message Encoding of the Barcode', example='iso-8859-1'
    )
    type: Optional[Type8] = Field(None, description='Type of the Barcode', example='CODE_128')
    altText: Optional[str] = Field(
        None,
        description='Displayed alternative value at the bottom of the barcode',
        example='1231244',
    )
    fieldMap: Optional[str] = Field(
        None,
        description='If barcodeValue is set to ${CUSTOM}. fieldMap must be present to identify which field the barcodeValue should be set from.',
        example='memberId',
    )


class ExpiryType4(Enum):
    NEVER = 'NEVER'


class TemplateCardExpiryV11(BaseModel):
    expiryType: Optional[ExpiryType4] = Field(
        None,
        description='Type of expiry, either NEVER, FIXED_DATE, FROM_ACTIVATION or FIXED_SCANS',
        example='NEVER',
    )


class ExpiryType5(Enum):
    FIXED_DATE = 'FIXED_DATE'


class TemplateCardExpiryV12(BaseModel):
    expiryType: Optional[ExpiryType5] = Field(
        None,
        description='Type of expiry, either NEVER, FIXED_DATE, FROM_ACTIVATION or FIXED_SCANS',
        example='FIXED_DATE',
    )
    startDate: Optional[str] = Field(
        None,
        description='ISO 8601 date time that the card becomes active in the users digital wallet. For Apple cards, the card is still active however it will show up on the top of the stack and Google cards there is no effect unless they are grouped',
        example='2022-11-24T20:40:07Z',
    )
    endDate: Optional[str] = Field(
        None,
        description='ISO 8601 date time that the card expires in the users digital wallet',
        example='2022-11-24T20:40:07Z',
    )


class ExpiryType6(Enum):
    FROM_ACTIVATION = 'FROM_ACTIVATION'


class Timezone(Enum):
    Australia_Adelaide = 'Australia/Adelaide'
    Australia_Brisbane = 'Australia/Brisbane'
    Australia_Darwin = 'Australia/Darwin'
    Australia_Hobart = 'Australia/Hobart'
    Australia_Melbourne = 'Australia/Melbourne'
    Australia_Perth = 'Australia/Perth'
    Australia_Sydney = 'Australia/Sydney'


class FromActivation1(BaseModel):
    amount: Optional[str] = Field(
        None,
        description='The amount of time (based on the cardExpiry.fromActivation.measurement field) between the activation of the card produced by this template, and the expiry date',
        example='10',
    )
    measurement: Optional[Measurement] = Field(
        None,
        description='The unit of measurement to calculate the amount of time between the activation of the card produced by this template, and the expiry date',
        example='YEARS',
    )
    timezone: Optional[Timezone] = Field(
        None,
        description='By default expiry is set as UTC. This is to set it as a specific timezone',
        example='Australia/Melbourne',
    )


class TemplateCardExpiryV13(BaseModel):
    expiryType: Optional[ExpiryType6] = Field(
        None,
        description='Type of expiry, either NEVER, FIXED_DATE, FROM_ACTIVATION or FIXED_SCANS',
        example='FROM_ACTIVATION',
    )
    fromActivation: Optional[FromActivation1] = None


class ExpiryType7(Enum):
    FIXED_SCANS = 'FIXED_SCANS'


class TemplateCardExpiryV14(BaseModel):
    expiryType: Optional[ExpiryType7] = Field(
        None,
        description='Type of expiry, either NEVER, FIXED_DATE, FROM_ACTIVATION or FIXED_SCANS',
        example='FIXED_SCANS',
    )
    scans: Optional[float] = Field(
        None, description='Number of scans remaining before pass expires', example=1
    )


class TemplateCardExpiryV1(BaseModel):
    __root__: Union[
        TemplateCardExpiryV11, TemplateCardExpiryV12, TemplateCardExpiryV13, TemplateCardExpiryV14
    ] = Field(
        ...,
        description='Card Expiry field on Template that details how cards created by the template will expire',
    )


class AppleSettings(BaseModel):
    certId: Optional[str] = Field(
        None, description='Apple Certificate Litecard Id', example='st3dfdAsaaf'
    )


class GoogleSettings(BaseModel):
    certId: Optional[str] = Field(
        None, description='Google Certificate Litecard Id', example='s2pkdjkASg3'
    )
    googleIssuerId: Optional[str] = Field(None, description='Google Issuer Id', example='123524234')
    redemptionIssuers: Optional[List[str]] = Field(
        None, description='List of Redemption Issuers', example=['33315096237343']
    )


class PayloadType(Enum):
    BARCODE_VALUE = 'BARCODE_VALUE'


class Nfc(BaseModel):
    isNFCEnabled: Optional[bool] = Field(
        None, description='Checks if NFC cert is provided for this template'
    )
    payloadType: Optional[PayloadType] = Field(
        None,
        description='Payload type sent over nfc e.g. `LITECARD_ID` means the nfc payload will be the same as the litecard card ID',
        example='BARCODE_VALUE',
    )


class TemplateCertificatesV1(BaseModel):
    appleSettings: Optional[AppleSettings] = Field(None, description='Apple specific settings')
    googleSettings: Optional[GoogleSettings] = Field(None, description='Google specific settings')
    nfc: Optional[Nfc] = Field(None, description='NFC settings')


class TemplateColoursV1(BaseModel):
    background: Optional[str] = Field(
        None, description='Background colour of the pass', example='#ffffff'
    )
    label: Optional[str] = Field(
        None, description='Label colour of the apple pass', example='#ffffff'
    )
    foreground: Optional[str] = Field(
        None, description='Text colour of the apple pass', example='#ffffff'
    )
    strip: Optional[str] = Field(
        None, description='Text colour on top of strip image of the apple pass', example='#ffffff'
    )
    samsungBlink: Optional[str] = Field(
        None,
        description='Colour of the blinking indicating area in samsung wallet',
        example='#00ffaa',
    )
    samsungFont: Optional[SamsungFont] = Field(
        None, description='Colour of the font on the Samsung card'
    )


class Formatter(Enum):
    initials = 'initials'


class Location(Enum):
    PRIMARY_FIELD = 'PRIMARY_FIELD'
    HEADER_FIELD = 'HEADER_FIELD'
    SECONDARY_FIELD = 'SECONDARY_FIELD'
    AUXILIARY_FIELD = 'AUXILIARY_FIELD'
    BACK_FIELD = 'BACK_FIELD'


class TextAlignment(Enum):
    PKTextAlignmentLeft = 'PKTextAlignmentLeft'
    PKTextAlignmentCenter = 'PKTextAlignmentCenter'
    PKTextAlignmentRight = 'PKTextAlignmentRight'
    PKTextAlignmentNatural = 'PKTextAlignmentNatural'


class AppleFieldSettings(BaseModel):
    attributedValue: Optional[str] = Field(
        None,
        description='Overrides the apple field value key, can contain HTML a tags',
        example="<a href='http://google.com'>Google</a>",
        title='Apple Attributed Value',
    )
    position: conint(ge=0) = Field(
        ...,
        description='The position in the pass structure array. e.g. For a secondary field, a position of 0 means it is first in order to be rendered in that section. Positions start from 0.',
        example=1,
        title='Apple Field Position',
    )
    location: Location = Field(
        ...,
        description='The pass structure locations, each value pertains to a certain region/part of the apple pass',
        example='HEADER_FIELD',
        title='Apple Field Type',
    )
    changeMessage: Optional[str] = Field(
        None,
        description="This is the formatted string, that will be shown as a push notification message. The format string must contain %@, which is replaced with the field's new content. If no change message is set, the user isn't notified when the field changes.",
        example='Gate changed to %@',
        title='Apple Change Message',
    )
    dateStyle: Optional[AppleDateTimeStyleV1] = None
    timeStyle: Optional[AppleDateTimeStyleV1] = None
    numberStyle: Optional[AppleNumberStyleV1] = None
    textAlignment: Optional[TextAlignment] = Field(
        None,
        description='Optional argument that sets the text alignment of the field text. This value is not allowed on primary or back fields.',
        example='PKTextAlignmentRight',
    )
    ignoreTimeZone: Optional[bool] = Field(
        None,
        description='Optional. Always display the time and date in the given time zone, not in the user’s current time zone. The default value is false.',
        example=True,
        title='Apple Ignore Time Zone',
    )
    isRelativeDate: Optional[bool] = Field(
        None,
        description='Optional. If true, the label’s value is displayed as a relative date; otherwise, it is displayed as an absolute date. The default value is false.',
        example=True,
        title='Apple Relative Date',
    )


class Location1(Enum):
    NOT_USED = 'NOT_USED'
    ACCOUNT_NAME = 'ACCOUNT_NAME'
    LOYALTY_POINTS = 'LOYALTY_POINTS'
    TEXT_MODULE_DATA = 'TEXT_MODULE_DATA'
    MESSAGES = 'MESSAGES'
    OFFER_FINEPRINT = 'OFFER_FINEPRINT'
    OFFER_DETAILS = 'OFFER_DETAILS'
    EVENT_VENUE = 'EVENT_VENUE'
    EVENT_SECTION = 'EVENT_SECTION'
    EVENT_SEAT = 'EVENT_SEAT'
    EVENT_ROW = 'EVENT_ROW'
    EVENT_GATE = 'EVENT_GATE'
    EVENT_DOORS_OPEN = 'EVENT_DOORS_OPEN'
    EVENT_START = 'EVENT_START'
    EVENT_END = 'EVENT_END'
    EVENT_TICKET_TYPE = 'EVENT_TICKET_TYPE'
    EVENT_TICKET_MONEY = 'EVENT_TICKET_MONEY'
    EVENT_CONFIRMATION_CODE = 'EVENT_CONFIRMATION_CODE'


class FieldType1(Enum):
    TEXT = 'TEXT'
    TEXT_AND_NOTIFY = 'TEXT_AND_NOTIFY'


class GoogleFieldSettings(BaseModel):
    location: Location1 = Field(
        ...,
        description='The type of google field',
        example='TEXT_MODULE_DATA',
        title='Google Field Type',
    )
    position: Optional[conint(ge=0)] = Field(
        None,
        description='The position in the text modules data array. e.g. A position of 0 means it is first in order to be rendered in that section. Positions start from 0.',
        example=1,
        title='Google Text Module Field Position',
    )
    cardRow: Optional[bool] = Field(
        None, description='If this field should be displayed on the front of the pass'
    )
    fieldType: Optional[FieldType1] = Field(
        None, description='If using MESSAGES location, what type of MESSAGE field it is'
    )


class Location2(Enum):
    NOT_USED = 'NOT_USED'
    CUSTOMER_SERVICE_INFO = 'CUSTOMER_SERVICE_INFO'
    END_DATE = 'END_DATE'
    EVENT_ENTRANCE = 'EVENT_ENTRANCE'
    EVENT_GRADE = 'EVENT_GRADE'
    EVENT_ISSUE_DATE = 'EVENT_ISSUE_DATE'
    EVENT_RESERVATION_NUMBER = 'EVENT_RESERVATION_NUMBER'
    EVENT_SEAT_CLASS = 'EVENT_SEAT_CLASS'
    EVENT_SEAT_NUMBER = 'EVENT_SEAT_NUMBER'
    EVENT_SEAT_LAYOUT_IMAGE = 'EVENT_SEAT_LAYOUT_IMAGE'
    START_DATE = 'START_DATE'
    NOTICE_DESCRIPTION = 'NOTICE_DESCRIPTION'
    USER = 'USER'


class SamsungFieldSettings(BaseModel):
    location: Location2 = Field(
        ...,
        description='The type of samsung field',
        example='TEXT_MODULE_DATA',
        title='Samsung Field Type',
    )
    position: Optional[conint(ge=0)] = Field(
        None,
        description='The position in the noticeDesc array. e.g. A position of 0 means it is first in order to be rendered in that section. Positions start from 0.',
        example=1,
        title='Samsung Notice Description tField Position',
    )


class DataType(Enum):
    radio = 'radio'
    select = 'select'
    text = 'text'
    textArea = 'textArea'
    number = 'number'
    phone = 'phone'
    date = 'date'
    dateTime = 'dateTime'
    image = 'image'
    nationality = 'nationality'


class Rule4(Enum):
    required = 'required'
    phone = 'phone'
    email = 'email'
    integer = 'integer'


class Option2(BaseModel):
    value: Optional[str] = Field(None, description='Value of the selected option')
    title: Optional[str] = Field(None, description='Label that front end displays')
    order: Optional[confloat(ge=0.0)] = Field(
        None,
        description='Numbered by priority, the final order will be in ascending order',
        example=1,
    )


class ExternalProviderMapping(Enum):
    LOYALTY_MEMBER_ID = 'LOYALTY_MEMBER_ID'
    LOYALTY_POINTS = 'LOYALTY_POINTS'
    CUSTOMER_ID = 'CUSTOMER_ID'
    VOUCHER_CODE = 'VOUCHER_CODE'
    VALID_EMAIL = 'VALID_EMAIL'
    VALID_EMAIL_MAPPING_CODE = 'VALID_EMAIL_MAPPING_CODE'


class FormFieldSettings(BaseModel):
    position: float = Field(
        ...,
        description='Order of the form field, all form fields will be ordered in ascending order (e.g. 1,2,3)',
        example=0,
    )
    placeHolderText: str = Field(..., description='Place holder text', example='Full Name')
    dataType: DataType = Field(..., description='Form field data type')
    rules: Optional[List[Rule4]] = Field(
        None, description='Validation rules that will be run on this field'
    )
    usage: Optional[FormFieldUsage] = None
    options: Optional[List[Option2]] = Field(None, description='List of options for drop down list')
    externalProviderMapping: Optional[ExternalProviderMapping] = Field(
        None,
        description='If the field is mapped to an external provider, the key of the external provider',
    )
    externalMappingKey: Optional[str] = Field(
        None,
        description='If the field is mapped to an external provider, the key of the field in the external provider',
        example='memberId',
    )


class FrontEndMappingEnum(Enum):
    SCAN = 'SCAN'
    SCAN_TABLE = 'SCAN_TABLE'
    MEMBER_TABLE = 'MEMBER_TABLE'


class PassType1(Enum):
    EVENT_TICKET = 'EVENT_TICKET'
    FLIGHT = 'FLIGHT'
    GIFT_CARD = 'GIFT_CARD'
    LOYALTY = 'LOYALTY'
    OFFER = 'OFFER'
    TRANSIT = 'TRANSIT'
    GENERIC = 'GENERIC'


class RedemptionChannel(Enum):
    INSTORE = 'INSTORE'
    ONLINE = 'ONLINE'
    BOTH = 'BOTH'
    TEMPORARY_PRICE_REDUCTION = 'TEMPORARY_PRICE_REDUCTION'


class Offer(BaseModel):
    redemptionChannel: Optional[RedemptionChannel] = Field(
        None,
        description='The redemption channel application to the coupon (i.e. where the coupon can be redeemmed on)',
    )


class ConfirmationCodeLabel(Enum):
    CONFIRMATION_CODE_LABEL_UNSPECIFIED = 'CONFIRMATION_CODE_LABEL_UNSPECIFIED'
    CONFIRMATION_CODE = 'CONFIRMATION_CODE'
    CONFIRMATION_NUMBER = 'CONFIRMATION_NUMBER'
    ORDER_NUMBER = 'ORDER_NUMBER'
    RESERVATION_NUMBER = 'RESERVATION_NUMBER'


class GateLabel(Enum):
    GATE = 'GATE'
    DOORS = 'DOORS'
    ENTRANCE = 'ENTRANCE'


class SectionLabel(Enum):
    SECTION = 'SECTION'
    THEATER = 'THEATER'


class RowLabel(Enum):
    ROW = 'ROW'
    ROW_LABEL_UNSPECIFIED = 'ROW_LABEL_UNSPECIFIED'


class SeatLabel(Enum):
    SEAT = 'SEAT'
    SEAT_LABEL_UNSPECIFIED = 'SEAT_LABEL_UNSPECIFIED'


class EventTicket(BaseModel):
    confirmationCodeLabel: Optional[ConfirmationCodeLabel] = Field(
        None,
        description='The confirmation code of the event reservation. This may also take the form of an order number, confirmation number, reservation number, or other equivalent.',
    )
    gateLabel: Optional[GateLabel] = Field(
        None, description='Gate Label, it could be gate, doors or entrace'
    )
    sectionLabel: Optional[SectionLabel] = Field(
        None, description='Section label, it could be section or theater'
    )
    rowLabel: Optional[RowLabel] = Field(
        None, description='Row label, it could be row or unspecified'
    )
    seatLabel: Optional[SeatLabel] = Field(
        None, description='Seat label, it could be seat or unspecified'
    )


class MultipleDevicesAndUsersStatus(Enum):
    MULTIPLE_HOLDERS = 'MULTIPLE_HOLDERS'
    ONE_USER_ALL_DEVICES = 'ONE_USER_ALL_DEVICES'
    ONE_USER_ONE_DEVICE = 'ONE_USER_ONE_DEVICE'


class TemplateGoogleWalletSettingsV1(BaseModel):
    passType: PassType1 = Field(..., description='Google wallet card type', example='LOYALTY')
    offer: Optional[Offer] = Field(None, description='Google offer settings')
    eventTicket: Optional[EventTicket] = Field(
        None,
        description='Event Ticket settings for google. Ref: https://developers.google.com/wallet/tickets/events/resources/template',
    )
    securityShimmer: Optional[bool] = Field(
        None,
        description='Enable Google Barcode Shimmer for in-person screenshot protection',
        example=True,
    )
    multipleDevicesAndUsersStatus: Optional[MultipleDevicesAndUsersStatus] = Field(
        None, description='Identifies whether multiple users and devices can save the same pass'
    )
    title: Optional[str] = Field(
        None, description='Text that appears beside your logo on the pass', example='Litecard'
    )
    header: Optional[str] = Field(
        None,
        description='Text that appears within your pass before expanding',
        example='Your membership Pass',
    )
    subHeader: Optional[str] = Field(
        None, description='The Label for the header section', example='Welcome!'
    )


class TemplateImagesV1(BaseModel):
    logo: Optional[str] = Field(
        None,
        description='URL of uploaded a logo image (square), used by Apple, Google & Samsung, 300px by 300px.',
        example='https://s3bucketlocation/business-name/logo.png',
    )
    logoDarkMode: Optional[str] = Field(
        None,
        description='URL of uploaded a logo image (square), used by Samsung, 300px by 300px. Used specifically for dark mode.',
        example='https://s3bucketlocation/business-name/logo.png',
    )
    logoLightMode: Optional[str] = Field(
        None,
        description='URL of uploaded a logo image (square), used by Samsung, 300px by 300px. Used specifically for light mode.',
        example='https://s3bucketlocation/business-name/logo.png',
    )
    hero: Optional[str] = Field(
        None,
        description='URL of uploaded hero image, used by Google. 1032px x 336px',
        example='https://s3bucketlocation/business-name/hero.png',
    )
    strip: Optional[str] = Field(
        None,
        description="URL of uploaded strip image, used by Apple. 1125px by 432px. Will overwrite Apple's thumbnail image.",
        example='https://s3bucketlocation/business-name/hero.png',
    )
    appleLogoOverride: Optional[str] = Field(
        None,
        description='URL of uploaded logo image used by Apple. This will replace the shared logo image. 150px height with max width of 480px',
        example='https://s3bucketlocation/business-name/hero.png',
    )
    icon: Optional[str] = Field(
        None,
        description='URL of uploaded icon image, used by Apple',
        example='https://s3bucketlocation/business-name/icon.png',
    )
    thumbnail: Optional[str] = Field(
        None,
        description='URL of uploaded thumbnail image. 270px by 270px. Only available on Apple Event Ticket and Generic card types and certain Samsung Card Types.',
        example='https://s3bucketlocation/business-name/thumbnail.png',
    )
    background: Optional[str] = Field(
        None,
        description='URL of uploaded background image. 270px by 270px. Only available on Apple Event Ticket card types',
        example='https://s3bucketlocation/business-name/background.png',
    )


class Type9(Enum):
    NOT_USED = 'NOT_USED'
    URI_WEB = 'URI_WEB'
    URI_TEL = 'URI_TEL'
    URI_EMAIL = 'URI_EMAIL'
    HOMEPAGE_URI = 'HOMEPAGE_URI'
    HELP_URI = 'HELP_URI'


class Apple(BaseModel):
    lockScreenMessage: Optional[str] = Field(
        None,
        description='Lock screen message displayed when a pass within proximity of the location',
        example='Buy 1 get 1 free today only',
    )


class Samsung(BaseModel):
    address: Optional[str] = Field(
        None, description='Address of the location', example='123 Broad Street'
    )
    name: Optional[str] = Field(None, description='Name of the location', example="Joe's Pizza")


class PassType2(Enum):
    EVENT_TICKET = 'EVENT_TICKET'
    BOARDING_PASS = 'BOARDING_PASS'
    COUPON = 'COUPON'
    ID = 'ID'
    LOYALTY = 'LOYALTY'
    GIFT_CARD = 'GIFT_CARD'


class CustomerServiceInfo(BaseModel):
    call: Optional[str] = Field(None, description='Phone number', example='+61 (03) 9999 9000')
    email: Optional[str] = Field(
        None, description='Email address', example='restaurant-name@gmail.com'
    )
    website: Optional[str] = Field(
        None, description='Website url', example='https://www.restaurant-name.com/'
    )


class TemplateSamsungWalletSettingsV1(BaseModel):
    passType: PassType2 = Field(..., description='Samsung wallet card type', example='EVENT_TICKET')
    walletCardId: str = Field(
        ...,
        description='Unique wallet card Id that is generated when you create the wallet template on the samsung portal',
        example='3ftjqoit67i00',
    )
    partnerId: str = Field(..., description='Samsung Partner ID', example='4847413840325458240')
    appLinkLogo: Optional[str] = Field(
        None, description='Logo of the relevant app', example='https://image'
    )
    appLinkName: Optional[str] = Field(
        None, description='Name of the relevant app', example="Joe's Pizza"
    )
    appLinkData: Optional[str] = Field(
        None, description='Link to the application or website', example='https://joespizza.com'
    )
    customerServiceInfo: Optional[CustomerServiceInfo] = Field(
        None, description="Customer service contact details. Known as 'csInfo' on samsung fields"
    )


class TemplateUsageV1Enum(Enum):
    NOT_USED = 'NOT_USED'
    APPLE_WALLET = 'APPLE_WALLET'
    GOOGLE_WALLET = 'GOOGLE_WALLET'
    SAMSUNG_WALLET = 'SAMSUNG_WALLET'


class TemplateUsageV1(BaseModel):
    __root__: List[TemplateUsageV1Enum] = Field(
        ..., description='List of strings to indicate where a field is rendered'
    )


class Status10(Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'
    DELETED = 'DELETED'


class GoogleWalletSettings(BaseModel):
    title: Optional[str] = Field(
        None, description='Text that appears beside your logo on the pass', example='Litecard'
    )
    header: Optional[str] = Field(
        None,
        description='Text that appears within your pass before expanding',
        example='Your membership Pass',
    )
    subHeader: Optional[str] = Field(
        None, description='The Label for the header section', example='Welcome!'
    )


class AuthConfig1(BaseModel):
    securityHeader: Optional[str] = Field(
        None,
        description='The header to use in the request when entering the key',
        example='X-API-KEY',
    )
    apiKey: Optional[str] = Field(
        None, description='API Key to use to authenticate with the webhook', example='abc123'
    )


class WebhookRegistrationRequestBody(BaseModel):
    webhookUrl: str = Field(
        ...,
        description='The endpoint for Litecard to send the download data',
        example='https://example.com/webhook',
    )
    method: Method = Field(..., description='Method to use', example='POST')
    authType: Optional[AuthType] = Field(
        None, description='The type of Auth to use for the webhook'
    )
    authConfig: Optional[AuthConfig1] = Field(
        None, description='The properties we need to use for Authentication'
    )
    events: List[Event] = Field(..., description='Types of events the webhook supports')
    provider: Optional[str] = Field(
        None, description='To determine the schema of payloads for the events'
    )


class CardDetails(BaseModel):
    cardId: Optional[str] = Field(None, description='Id of created card', example='abc123')
    cardOwnerId: Optional[str] = Field(
        None, description='Id of created card owner', example='efg345'
    )
    downloadId: Optional[str] = Field(
        None,
        description='Id used for hosted litecard landing page e.g. https://app.dev.litecard.io/welcome/?id=5c_Wc9h-WCng0oxe8nHNn',
        example='5c_Wc9h-WCng0oxe8nHNn',
    )
    appleLink: Optional[str] = Field(
        None,
        description='URL apple wallet card',
        example='https://litecard-demo-pkpass.s3-ap-southeast-2.amazonaws.com/coldbrew.pkpass',
    )
    googleLink: Optional[str] = Field(
        None,
        description='URL google wallet card',
        example='https://pay.google.com/gp/v/save/eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJsaXRlY2FyZC10ZXN0QGNsZXZlci1hYmJleS0zMDg1MDcuaWFtLmdzZXJ2aWNlYWNjb3VudC5jb20iLCJhdWQiOiJnb29nbGUiLCJ0eXAiOiJzYXZldG9hbmRyb2lkcGF5IiwiaWF0IjoxNjIwMTE0NDkxLCJwYXlsb2FkIjp7ImxveWFsdHlPYmplY3RzIjpbeyJpZCI6IjMzODgwMDAwMDAwMTA2MDYyNDEuTE9ZQUxUWV9PQkpFQ1RfNTRkYmMwNTUtOWRlMy00YWZjLTg0YmUtZDhiNTZjN2U5Mzc5IiwiY2xhc3NJZCI6IjMzODgwMDAwMDAwMTA2MDYyNDEuTE9ZQUxUWV9DTEFTU185OTliOTVlYi00ZDVjLTQzZDEtOGFhOC05Zjg1ZjI0YzlmODQiLCJzdGF0ZSI6IkFDVElWRSIsImFjY291bnROYW1lIjoiSmFzb24iLCJhY2NvdW50SWQiOiIxMjMxMjMiLCJiYXJjb2RlIjp7ImFsdGVybmF0ZVRleHQiOiIxMjMxMjMiLCJ2YWx1ZSI6IjEyMzEyMyIsInR5cGUiOiJDT0RFXzEyOCJ9LCJsb2NhdGlvbnMiOlt7ImxhdGl0dWRlIjoiLTM3LjgwNjIzMTU2ODQyODgxIiwibG9uZ2l0dWRlIjoiMTQ0Ljk4OTkwMjQwODE0ODcifV0sInZhbGlkVGltZUludGVydmFsIjp7InN0YXJ0Ijp7ImRhdGUiOiIyMDIxLTA0LTIwVDAwOjAwOjAwLjAwKzEwOjAwIn0sImVuZCI6eyJkYXRlIjoiMjAyNS0wNC0yMFQyMzo1OTowMC4wMCsxMDowMCJ9fSwibGlua3NNb2R1bGVEYXRhIjp7InVyaXMiOlt7InVyaSI6InRlbDo2NTA1NTU1NTU1IiwiZGVzY3JpcHRpb24iOiJNb2JpbGUgTnVtYmVyIn0seyJ1cmkiOiJtYWlsdG86am9obmRvZUBsaXRlY2FyZC5jb20uYXUiLCJkZXNjcmlwdGlvbiI6IkVtYWlsIn1dfX1dfSwib3JpZ2lucyI6WyJodHRwOi8vbG9jYWxob3N0OjgwODAiXX0.bR5nSNqMPH6KUwiaqMP-E-nlyjzllOR9-rxUCVgPhqvra_qZ54kc3ZHX64LyViABgSbLIqFEG_EsfA9FCVunAs3ikr1yB5Tk3WiwQ13zt-rH7443_XTI078mtzESl930AL5mVhyrteTMfrhHHV0rrzChXDPgqBjPzsaqs4oGIeW7bVu7S1SC_M8EC-pxTUwqkvvv17xpBVBY_BKzDaK1uEykqdQp2XFHjjRT_esBc6xbiMTDGz11sp395v0RO-9jpp4z-L5igi7prFDgm7ZWBcbSZSKMBckp1lzctLIZ3jidJ9pg-lwgaZyyksmWWnDkVFKE0CWAQV3wFg6M2PXXyA',
    )
    paymentRequired: Optional[bool] = Field(
        None, description='Require payment after form submission'
    )


class CreatePassTemplateResponseBody(BaseModel):
    cardDetails: Optional[CardDetails] = None
    success: Optional[bool] = Field(
        None, description='Returns whether the request was successful', example=True
    )
    templateId: Optional[str] = Field(
        None,
        description='Identifier for the template used to create the card',
        example='test_business',
    )
    formId: Optional[str] = Field(
        None, description='Id for field input form', example='V1StGXR8_Z5jdHi6B-myT'
    )


class GetBacklinksResponse(BaseModel):
    backlink: str = Field(
        ..., description='URL belonging to the backlinkId', example='https://example.com'
    )


class Actions(BaseModel):
    condition: TemplateActionCondition
    action: TemplateActionParams
    label: Optional[str] = Field(None, description='Name of the Action', example='Redeem Burger')


class ScanResponseSchema(BaseModel):
    card: Card1
    cardOwner: CardOwner1 = Field(..., description='Fields that are returned for each card owner')
    actions: Optional[Dict[str, Actions]] = None


class AppleWalletSettings(TemplateWalletSettings):
    hideLogoText: Optional[bool] = Field(
        None, description='Hides the logo text if true', example=True
    )


class TemplateRequest(BaseModel):
    templateName: Optional[str] = Field(
        None, description='Name of the template', example='Cherry Loyalty Template'
    )
    isInternal: Optional[bool] = Field(
        None, description='Public Visibility of the template', example=True
    )
    userType: Optional[str] = Field(None, description='User Type', example='Patron')
    passType: Optional[str] = Field(None, description='Pass Type', example='Visit')
    dataFields: Optional[Dict[str, TemplateDataFields]] = Field(
        None, description='Data Fields for the pass'
    )
    barcode: Optional[TemplateBarcode] = None
    businessId: Optional[str] = Field(None, description='Business ID', example='sample_dev_company')
    notificationFields: Optional[TemplateNotificationFields] = None
    businessName: Optional[str] = Field(
        None, description='Business Name', example='sample_dev_company'
    )
    rateLimit: Optional[RateLimitV1] = None
    appleWalletSettings: Optional[AppleWalletSettings] = None
    googlePaySettings: Optional[TemplateWalletSettings] = None
    colours: Optional[TemplateColours] = None
    description: Optional[str] = Field(
        None, description='Template description', example='Test Loyalty Pass'
    )
    status: Optional[Status4] = Field(None, description='Status of the template', example='ACTIVE')
    images: Optional[TemplateImages] = None
    cardExpiry: Optional[TemplateCardExpiry] = None
    certificate: Optional[Certificate] = None


class UIConfig(BaseModel):
    signupPage: Optional[UIPageSchema] = None


class WelcomeDetailsResponse(BaseModel):
    downloadId: str = Field(
        ..., description='DownloadId used for landing page', example='V1StGXR8_Z5jdHi6B-myT'
    )
    appleLink: str = Field(
        ...,
        description='Link to apple pass',
        example='https://litecard-demo-pkpass.s3-ap-southeast-2.amazonaws.com/coldbrew.pkpass',
    )
    googleLink: str = Field(
        ...,
        description='Link to google pass',
        example='https://pay.google.com/gp/v/save/eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJsaXRlY2FyZC10ZXN0QGNsZXZlci1hYmJleS0zMDg1MDcuaWFtLmdzZXJ2aWNlYWNjb3VudC5jb20iLCJhdWQiOiJnb29nbGUiLCJ0eXAiOiJzYXZldG9hbmRyb2lkcGF5IiwiaWF0IjoxNjIwMTE0NDkxLCJwYXlsb2FkIjp7ImxveWFsdHlPYmplY3RzIjpbeyJpZCI6IjMzODgwMDAwMDAwMTA2MDYyNDEuTE9ZQUxUWV9PQkpFQ1RfNTRkYmMwNTUtOWRlMy00YWZjLTg0YmUtZDhiNTZjN2U5Mzc5IiwiY2xhc3NJZCI6IjMzODgwMDAwMDAwMTA2MDYyNDEuTE9ZQUxUWV9DTEFTU185OTliOTVlYi00ZDVjLTQzZDEtOGFhOC05Zjg1ZjI0YzlmODQiLCJzdGF0ZSI6IkFDVElWRSIsImFjY291bnROYW1lIjoiSmFzb24iLCJhY2NvdW50SWQiOiIxMjMxMjMiLCJiYXJjb2RlIjp7ImFsdGVybmF0ZVRleHQiOiIxMjMxMjMiLCJ2YWx1ZSI6IjEyMzEyMyIsInR5cGUiOiJDT0RFXzEyOCJ9LCJsb2NhdGlvbnMiOlt7ImxhdGl0dWRlIjoiLTM3LjgwNjIzMTU2ODQyODgxIiwibG9uZ2l0dWRlIjoiMTQ0Ljk4OTkwMjQwODE0ODcifV0sInZhbGlkVGltZUludGVydmFsIjp7InN0YXJ0Ijp7ImRhdGUiOiIyMDIxLTA0LTIwVDAwOjAwOjAwLjAwKzEwOjAwIn0sImVuZCI6eyJkYXRlIjoiMjAyNS0wNC0yMFQyMzo1OTowMC4wMCsxMDowMCJ9fSwibGlua3NNb2R1bGVEYXRhIjp7InVyaXMiOlt7InVyaSI6InRlbDo2NTA1NTU1NTU1IiwiZGVzY3JpcHRpb24iOiJNb2JpbGUgTnVtYmVyIn0seyJ1cmkiOiJtYWlsdG86am9obmRvZUBsaXRlY2FyZC5jb20uYXUiLCJkZXNjcmlwdGlvbiI6IkVtYWlsIn1dfX1dfSwib3JpZ2lucyI6WyJodHRwOi8vbG9jYWxob3N0OjgwODAiXX0.bR5nSNqMPH6KUwiaqMP-E-nlyjzllOR9-rxUCVgPhqvra_qZ54kc3ZHX64LyViABgSbLIqFEG_EsfA9FCVunAs3ikr1yB5Tk3WiwQ13zt-rH7443_XTI078mtzESl930AL5mVhyrteTMfrhHHV0rrzChXDPgqBjPzsaqs4oGIeW7bVu7S1SC_M8EC-pxTUwqkvvv17xpBVBY_BKzDaK1uEykqdQp2XFHjjRT_esBc6xbiMTDGz11sp395v0RO-9jpp4z-L5igi7prFDgm7ZWBcbSZSKMBckp1lzctLIZ3jidJ9pg-lwgaZyyksmWWnDkVFKE0CWAQV3wFg6M2PXXyA',
    )
    barcodeLink: Optional[str] = Field(
        None, description='Link to Barcode image', example='https://example.com/blah'
    )
    samsungLink: Optional[str] = Field(
        None,
        description='Link to samsung pass',
        example='https://a.swallet.link/atw/656147182764415319#Clip?pdata=sIgHCzIwM9g',
    )
    uiConfig: Optional[UIConfig] = None
    disableQR: Optional[bool] = Field(
        None, description='Disable QR code on Welcome Page', example=True
    )


class Business(BaseModel):
    id: Optional[str] = Field(
        None, description='Unique identifier for the business', example='L3ZrB748fLxlFD8ZjFVgX'
    )
    appleTeamIdentifier: Optional[str] = Field(
        None, description='Team identifier for Apple services', example='F5MB9WT9BZ'
    )
    businessName: Optional[str] = Field(None, description='Name of the business', example='Billing')
    cardCount: Optional[int] = Field(
        None, description='Number of cards associated with the business', example=60
    )
    cardLimit: Optional[int] = Field(
        None,
        description='Maximum number of cards allowed for the business (-1 for unlimited)',
        example=-1,
    )
    cardOwnerCount: Optional[int] = Field(
        None, description='Number of card owners associated with the business', example=8
    )
    certId: Optional[str] = Field(
        None, description='Identifier for the certificate used by the business', example='freetier'
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='Timestamp of when the business record was created',
        example='2022-09-08T06:37:44.803Z',
    )
    email: Optional[EmailStr] = Field(
        None,
        description='Contact email for the business',
        example='billing_analytics@litecard.com.au',
    )
    logoUrl: Optional[AnyUrl] = Field(
        None,
        description="URL to the business's logo",
        example='https://assets.litecard.io/Litecard_Badge.png',
    )
    mailchimp: Optional[Mailchimp] = Field(
        None, description='Mailchimp configuration details for the business'
    )
    passTypeIdentifier: Optional[str] = Field(
        None,
        description='Pass type identifier for mobile wallet services',
        example='pass.au.com.lc.dev.freetier',
    )
    templateCount: Optional[int] = Field(
        None, description='Number of templates created by the business', example=2
    )
    templateLimit: Optional[int] = Field(
        None,
        description='Maximum number of templates allowed for the business (-1 for unlimited)',
        example=-1,
    )
    tier: Optional[str] = Field(
        None, description='Tier or plan level of the business', example='FREE'
    )
    updatedAt: Optional[datetime] = Field(
        None,
        description="Timestamp of the last update to the business's record",
        example='2023-02-15T04:39:05.239Z',
    )
    uiConfig: Optional[UIConfig] = None


class BusinessCardOptions(BaseModel):
    firstName: Optional[str] = Field(None, description='First Name', example='John')
    lastName: Optional[str] = Field(None, description='Last Name', example='Doe')
    middleName: Optional[str] = Field(None, description='Middle Name', example='Sam')
    email: Optional[str] = Field(
        None, description='Email field for email address', example='john@litecard.com.au'
    )
    workPhone: Optional[str] = Field(None, description='Work phone number', example='+61400000000')
    homePhone: Optional[str] = Field(None, description='Home phone number', example='+61400000000')
    company: Optional[str] = Field(None, description='Company of Employment', example='Litecard')
    title: Optional[str] = Field(
        None, description='Title of position at Company', example='Developer'
    )
    social: Optional[List[SocialMedia]] = None


class BusinessCardRequestBody(BaseModel):
    businessId: Optional[str] = Field(
        None, description='Id for the Business that this entity belongs to', example='LiteCard'
    )
    templateId: Optional[str] = Field(
        None,
        description='Id for the apple/google pass template used to create the card.',
        example='test_business',
    )
    cardPayload: Optional[BaseCardPayload] = None
    options: Optional[SignUpOptions] = None
    businessCard: Optional[BusinessCardOptions] = None


class CreateSubBusinessRequestBody(BaseModel):
    businessName: Optional[str] = Field(None, description='Business name', example='Cryo gym')
    email: Optional[str] = Field(None, description='Business email', example='Ankus Fang')
    password: Optional[str] = Field(None, description='Business password', example='password')
    appUrls: Optional[List[str]] = Field(None, description='App urls')
    country: Optional[str] = Field(None, description='Business country', example='Australia')
    postCode: Optional[str] = Field(None, description='Business postcode', example='CryoGym')
    phone: Optional[str] = Field(None, description='Business phone', example='Ankus Fang')
    state: Optional[str] = Field(None, description='Business state', example='VIC')
    logoImage: Optional[str] = Field(
        None, description='Business logo image file', example='base64 encoded image'
    )
    tableConfig: Optional[TableConfig] = None


class MailchimpSettings1(BaseModel):
    enabled: Optional[bool] = Field(
        None, description='Enable mailchimp invitation emails', example=False
    )
    eventName: Optional[str] = Field(
        None, description='journey to trigger in mailchimp', example='my_event'
    )
    mergeFieldMapping: Optional[Dict[str, Any]] = Field(
        None, description='Additional merge field mappings to card data'
    )
    mergeFieldFormat: Optional[Dict[str, Any]] = Field(
        None,
        description='Format of the merge fields, For example MM/DD for birthday type data in mailchimp',
    )
    tags: Optional[List[MailchimpTagSettings]] = None


class FormV1(DatabaseMetaData):
    id: str = Field(..., description='Id of the form', example='-jJWhjZ1a')
    fields: List[FormFieldsV1]
    formName: str = Field(..., description='Name of the form', example='test form')
    businessId: str = Field(
        ...,
        description='Identifier for the Business that this entity belongs to',
        example='LiteCard',
    )
    passwordEnabled: Optional[bool] = Field(False, description='Enable password', example='true')
    logo: str = Field(
        ..., description='logo image link url', example='https://assets-dev.litecard.io/logo.png'
    )
    title: Optional[str] = Field(None, description='Title of the form', example='LiteCard')
    description: str = Field(
        ..., description='Description of the form', example='Make your move with LiteCard today.'
    )
    style: Style3
    connectIDEnabled: Optional[bool] = Field(
        None, description='Enable ConnectID Verification', example='false'
    )
    isInternal: bool = Field(..., description='Public Visibility of the form', example=True)
    templateId: str = Field(
        ...,
        description='Identifier for the template used to create the card',
        example='test_business',
    )
    status: Status7 = Field(..., description='Status of the form', example='ACTIVE')
    paymentRequired: Optional[bool] = Field(
        None, description='Require payment after form submission'
    )
    tacURL: Optional[str] = Field(None, description='Terms and Condition link to be used')
    smsEnabled: Optional[bool] = Field(
        None, description='Flag to send SMS or not. Used by our sign up form'
    )
    hideForm: Optional[bool] = Field(None, description='Hide form from Private Signup')
    mailchimpSettings: Optional[MailchimpSettings1] = Field(
        None, description='Form specific mailchimp settings'
    )
    createdBy: str = Field(..., description='User Id of the creator', example='abc123')


class ListNotificationGroupsResponse(BaseModel):
    groups: Optional[List[NotificationGroup]] = Field(
        None, description='Array of notification groups'
    )
    next: Optional[str] = Field(None, description='Next key for dynamoDB query')


class PassCountDetails(PassCountDetailsForTemplate):
    id: str = Field(..., description='The unique identifier for the business.')
    name: str = Field(..., description='The name of the business.')


class PassCountsHistory(BaseModel):
    duration: Optional[Duration] = Field(None, description='Duration ')
    businesses: Optional[List[PassCountDetails]] = Field(
        None, description='List of businesses related to the pass counts.'
    )


class RegisterBusinessRequestBody(BaseModel):
    businessName: str = Field(..., description='Name of the business', example='Litecard')
    token: str = Field(..., description='Token for the business', example='token')
    isMasterBusiness: Optional[bool] = Field(
        None, description='Is the business a master business', example=True
    )
    logoImage: str = Field(
        ..., description='Business logo image file', example='base64 encoded image'
    )
    email: EmailStr = Field(
        ..., description='Contact email for the business', example='test@ww.com'
    )
    password: str = Field(..., description='Password for the business', example='password')
    dashboardAccess: List[str] = Field(..., description='Access to the dashboard')
    appUrls: List[str] = Field(..., description='Urls of apps allowed')
    tableConfig: Optional[TableConfig] = None


class TemplateDataFieldV1(BaseModel):
    key: str = Field(..., description='Unique key', example='firstName')
    defaultCountryCode: Optional[str] = Field(
        None, description='Default country code for phone number field', example='au'
    )
    dateFormat: Optional[str] = Field(
        None,
        description='If field is a date data type and it is to be displayed on the pass. Use this key to determine the date format using dayjs syntax',
        example='DD/MM/YYYY',
    )
    defaultValue: Optional[Union[str, float]] = Field(
        None,
        description='Set a default value if you want a static value for this field. Overridden, if dataField[].value is set',
        example=10,
        title='Default Value',
    )
    label: str = Field(
        ...,
        description='The label of the field on the card/form',
        example='Member Since',
        title='Field Label',
    )
    helpText: Optional[str] = Field(
        None,
        description='Help text to be displayed next to the field label',
        example='Date the member joined',
    )
    description: Optional[str] = Field(
        None, description='Description of the field', example='This is the full name'
    )
    formatter: Optional[Formatter] = Field(
        None, description='Formatter to be used for the field', example='currency'
    )
    usage: TemplateUsageV1
    currencyCode: Optional[str] = Field(None, description='ISO 4217 currency code', example='AUD')
    userCanEdit: bool = Field(
        ...,
        description='Value is true if the field appears on the form',
        example=True,
        title='User Editable',
    )
    appleFieldSettings: Optional[AppleFieldSettings] = None
    googleFieldSettings: Optional[GoogleFieldSettings] = Field(
        None, description='Google wallet settings'
    )
    samsungFieldSettings: Optional[SamsungFieldSettings] = Field(
        None, description='Samsung field settings'
    )
    formFieldSettings: Optional[FormFieldSettings] = Field(
        None,
        description="Form field settings (Used for Litecard's Web UI based card creation workflow)",
    )
    frontEndMapping: Optional[List[FrontEndMappingEnum]] = Field(
        None,
        description='List to decide that decide whether the field should be rendered in the Litecard UI on scan previews or table views',
        example=['SCAN'],
        title='Front End Mapping',
    )
    uniqueValue: Optional[bool] = Field(
        None,
        description='Only used for segment keys - segment1, segment2 etc. Default: false',
        example=True,
    )


class TemplateLinkV1(BaseModel):
    id: Optional[str] = Field(None, description='Link ID')
    uri: Optional[str] = Field(None, description='URI')
    hyperlinkText: Optional[str] = Field(
        None,
        description='Add block of text with hyperlink by surrounding text with ${}, used by Apple Only',
        example='Click ${here} to visit the litecard website',
    )
    title: Optional[str] = Field(None, description='Link title')
    type: Optional[Type9] = Field(None, description='Type of link, used by Google Only')
    usage: Optional[TemplateUsageV1] = None
    position: Optional[float] = Field(
        None,
        description='Order of the links. The order will be sorted in ascending order e.g. 1,2,3',
    )


class TemplateLocationsV1Item(BaseModel):
    id: Optional[str] = Field(None, description='Location ID')
    lat: Optional[str] = Field(None, description='Latitude value', example='-37.8140000')
    lon: Optional[str] = Field(None, description='Longitude value', example='144.9633200')
    apple: Optional[Apple] = Field(None, description='Apple specific location fields')
    beaconId: Optional[str] = Field(
        None,
        description='proximityUUID of the Beacon. This is an alternative to long/lat',
        example='F8F589E9-C07E-58B0-AEAB-A36BE4D48FAC',
    )
    samsung: Optional[Samsung] = Field(None, description='Location details')
    order: Optional[float] = Field(
        None,
        description='Order of the locations. The order will be sorted in ascending order e.g. 1,2,3',
    )
    usage: Optional[TemplateUsageV1] = None


class TemplateLocationsV1(BaseModel):
    __root__: List[TemplateLocationsV1Item] = Field(
        ...,
        description='List of locations to be stored on the pass, used by Apple for Geo-Location messages. Max of 10 locations for apple passes.',
    )


class TemplateOverridesV1(BaseModel):
    class Config:
        extra = Extra.forbid

    images: Optional[TemplateImagesV1] = None
    barcode: Optional[TemplateBarcodeV1] = None
    locations: Optional[TemplateLocationsV1] = None
    cardExpiry: Optional[TemplateCardExpiryV1] = None
    links: Optional[List[TemplateLinkV1]] = Field(None, description='Template Links')


class TierTemplateSettings(BaseModel):
    default: bool = Field(
        ...,
        description="default tier when tier isn't provided during card creation. There must be only 1",
    )
    cardExpiry: Optional[TemplateCardExpiryV1] = None
    colours: Optional[TemplateColoursV1] = None
    images: Optional[TemplateImagesV1] = None
    barcode: Optional[TemplateBarcodeV1] = None
    locations: Optional[TemplateLocationsV1] = None
    links: Optional[List[TemplateLinkV1]] = Field(None, description='Template Links')
    dataFields: Optional[List[TemplateDataFieldV1]] = Field(
        None, description='Data Fields of the template'
    )
    googleWalletSettings: Optional[GoogleWalletSettings] = Field(
        None, description='Google Wallet Settings for the tier'
    )


class Form(BaseModel):
    id: Optional[str] = Field(None, description='Id for field input form', example='-jJWhjZ1a')
    createdAt: Optional[str] = Field(
        None, description='Create date of the form', example='2021-08-11T03:15:56.860Z'
    )
    fields: Optional[List[FormFields]] = None
    formName: Optional[str] = Field(None, description='Name of the form', example='test form')
    createdBy: Optional[str] = Field(
        None,
        description='Auth0 Id of the user who created this instance',
        example='V1StGXR8_Z5jdHi6B-myT',
    )
    businessId: Optional[str] = Field(
        None, description='Id for the Business that this entity belongs to', example='LiteCard'
    )
    userType: Optional[str] = Field(None, description='user type', example='staff')
    ttlEnabled: Optional[bool] = Field(None, description='Enable ttl', example='true')
    ttlPeriod: Optional[float] = Field(None, description='Set ttl period', example='10')
    updatedAt: Optional[str] = Field(
        None, description='Update date of the form', example='2021-08-11T03:15:56.860Z'
    )
    passwordEnabled: Optional[bool] = Field(None, description='Enable password', example='true')
    logo: Optional[str] = Field(
        None, description='logo image link url', example='https://assets-dev.litecard.io/logo.png'
    )
    title: Optional[str] = Field(None, description='Title of the form', example='LiteCard')
    description: Optional[str] = Field(
        None, description='Description of the form', example='Make your move with LiteCard today.'
    )
    style: Optional[Style] = None
    connectIDEnabled: Optional[bool] = Field(
        None, description='Enable ConnectID Verification', example='false'
    )
    isInternal: Optional[bool] = Field(
        None, description='Public Visibility of the form', example=True
    )
    templateId: Optional[str] = Field(
        None, description='Id for the template used to create the card', example='test_business'
    )
    status: Optional[str] = Field(None, description='Status of the form', example='Deleted')
    mailchimpSettings: Optional[MailchimpSettings] = Field(
        None, description='Form specific mailchimp settings'
    )
    tacURL: Optional[str] = Field(
        None, description='URL of terms and conditions page', example='https://example.com'
    )
    smsEnabled: Optional[bool] = Field(
        None, description='Flag to determine if we are to send SMS invitation or not', example=True
    )
    paymentRequired: Optional[bool] = Field(
        None,
        description='Whether this form belongs to a template that requires stripe payment',
        example=False,
    )
    hideForm: Optional[bool] = Field(None, description='Filter to hide form from private sign up')
    uiConfig: Optional[UIConfig] = None
    customDesign: Optional[CustomFormDesignSchema] = None


class PrivateSignUpRequestBody(BaseModel):
    class Config:
        extra = Extra.forbid

    templateId: str = Field(
        ...,
        description='Id for the apple/google pass template used to create the card.',
        example='test_business',
    )
    tier: Optional[str] = Field(
        None,
        description='For multi tiered templates. This is to select which tier to build',
        example='GOLD',
    )
    cardPayload: BaseCardPayload
    options: Optional[SignUpOptions] = None
    templateOverrides: Optional[TemplateOverridesV1] = None


class Profile(BaseModel):
    id: Optional[str] = Field(None, description='Business Id', example='CryoGym')
    businessName: Optional[str] = Field(None, description='Business name', example='Cryo gym')
    subBusinessName: Optional[str] = Field(
        None, description='Name to show on sub business selection', example='Cryo gym - Sub 1'
    )
    email: Optional[str] = Field(None, description='Business email', example='Ankus Fang')
    postCode: Optional[str] = Field(None, description='Business postcode', example='CryoGym')
    state: Optional[str] = Field(
        None, description='Business state', example='AHVW1qv4I_Teqdu4VjwMA'
    )
    logoUrl: Optional[str] = Field(
        None,
        description='Business logo image file',
        example='https://assets.dev.litecard.io/Logo-Badge_3.png',
    )
    templateCount: Optional[float] = Field(
        None, description='Current total number of templates a user has.', example='3'
    )
    templateLimit: Optional[float] = Field(
        None,
        description='Maximum amount of templates this user can have. A templateLimit of -1 means the user can have unlimited templates.',
        example='12',
    )
    cardCount: Optional[float] = Field(None, description='Active passes count', example='12')
    totalCardCount: Optional[float] = Field(None, description='Total passes count', example='12')
    downloadedApplePassCount: Optional[float] = Field(
        None,
        description='Current total number of apple pass downloads a business has.',
        example='12',
    )
    downloadedGooglePassCount: Optional[float] = Field(
        None,
        description='Current total number of google pass downloads a business has.',
        example='12',
    )
    cardLimit: Optional[float] = Field(None, description='Card limit left', example='12')
    cardOwnerCount: Optional[float] = Field(
        None, description='Current total number of card owners a user has.', example='100'
    )
    tier: Optional[str] = Field(None, description='tier for the business', example='BUSINESS')
    createdAt: Optional[str] = Field(
        None,
        description='Date when pass was first created, in ISO-8601 format',
        example='2021-08-11T03:15:56.860Z',
    )
    updatedAt: Optional[str] = Field(
        None,
        description='Date when pass was last updated, in ISO-8601 format',
        example='2021-08-1T03:15:56.860Z',
    )
    stripeCustomerId: Optional[str] = Field(
        None, description="User's stripe customer account", example='cus_KozWy3MZchR5DY'
    )
    tableConfig: Optional[TableConfig] = None
    isMasterBusiness: Optional[bool] = Field(
        None, description='Is the account a master account', example=True
    )
    masterBusinessId: Optional[str] = Field(
        None, description='Master business id', example='master-business-id'
    )
    subBusinesses: Optional[List[SubBusinessSummary]] = Field(None, description='Sub businesses')
    subBusinessRoles: Optional[SubBusinessRoles] = None
    uiConfig: Optional[UIConfig] = None
    bulkPassInvitesSentAt: Optional[str] = Field(
        None,
        description='Date when bulk pass invites were last sent, in ISO-8601 format',
        example='2021-08-11T03:15:56.860Z',
    )
    webhooks: Optional[List[CustomerWebhook]] = None
    useEnhancedNotificationSend: Optional[bool] = Field(
        None,
        description='Whether to use the enhanced notification sender for sending notifications',
        example=True,
    )


class PublicSignUpRequestBody(BaseModel):
    class Config:
        extra = Extra.forbid

    businessId: str = Field(
        ..., description='Id for the Business that this entity belongs to', example='LiteCard'
    )
    templateId: str = Field(
        ...,
        description='Id for the apple/google pass template used to create the card.',
        example='test_business',
    )
    successUrl: Optional[str] = Field(
        None,
        description='Page for stripe to redirect to on success',
        example='http://localhost:5000/success',
    )
    cancelUrl: Optional[str] = Field(
        None,
        description='Page for stripe to redirect to on cancel',
        example='http://localhost:5000',
    )
    cardPayload: BaseCardPayload
    options: Optional[SignUpOptions] = None
    templateOverrides: Optional[TemplateOverridesV1] = None


class Template(TemplateRequest):
    actions: Optional[TemplateActions] = None
    id: Optional[str] = Field(
        None, description='Id of the template', example='V1StGXR8_Z5jdHi6B-myT'
    )
    formId: Optional[str] = Field(
        None, description='Id of the Litecard UI form used  ', example='V1StGXR8_Z5jdHi6B-myT'
    )
    createdAt: str = Field(
        ...,
        description='Date when pass was first created, in ISO-8601 format',
        example='2021-08-11T03:15:56.860Z',
    )
    updatedAt: Optional[str] = Field(
        None,
        description='Date when pass was updated, in ISO-8601 format',
        example='2021-08-11T03:15:56.860Z',
    )
    version: Optional[float] = Field(None, description='Template Schema Version', example=1)
    dataFields: Dict[str, TemplateDataFields] = Field(..., description='Data Fields for the pass')


class TemplateAndFormRequest(BaseModel):
    template: Optional[TemplateRequest] = None
    form: Optional[FormRequest] = None


class UpdateCardRequestBody(BaseModel):
    class Config:
        extra = Extra.forbid

    cardId: str = Field(..., description='Unique Card Id', example='-jJWhjZ1a')
    syncStaticFields: Optional[bool] = Field(
        None, description='Flag to sync static fields', example=True
    )
    tier: Optional[str] = Field(
        None,
        description='For multi tiered templates. This is to select which tier to build',
        example='GOLD',
    )
    cardPayload: Optional[CardPayload] = None
    templateOverrides: Optional[TemplateOverridesV1] = None


class BaseTemplateV1(BaseModel):
    name: Optional[str] = Field(
        None, description='Human readable name of the template', example='Bronze Card'
    )
    cardCount: Optional[int] = Field(
        None, description='Number of active cards created using this template', example=80
    )
    downloadsCount: Optional[int] = Field(
        None, description='Number of cards downloaded', example=70
    )
    downloadedApplePassCount: Optional[int] = Field(
        None, description='Number of cards downloaded on Apple Wallet', example=50
    )
    downloadedGooglePassCount: Optional[int] = Field(
        None, description='Number of cards downloaded on Google Wallet', example=20
    )
    description: Optional[str] = Field(
        None, description='Template Description', example='LiteCard Bronze Card'
    )
    businessName: Optional[str] = Field(
        None, description='Name of the business', example='LiteCard'
    )
    isInternal: Optional[bool] = Field(
        None, description='Public Visibility of the template/form', example=False
    )
    type: Optional[Type1] = Field(None, description='The Type of Pass')
    externalId: Optional[str] = Field(
        None, description='External id mapping to third party system', example='1234'
    )
    settings: Optional[SettingsV1] = None
    stripeSettings: Optional[StripeSettings] = None
    appleWalletSettings: Optional[TemplateAppleWalletSettingsV1] = None
    googleWalletSettings: Optional[TemplateGoogleWalletSettingsV1] = None
    samsungWalletSettings: Optional[TemplateSamsungWalletSettingsV1] = None
    colours: Optional[TemplateColoursV1] = None
    images: Optional[TemplateImagesV1] = None
    barcode: Optional[TemplateBarcodeV1] = None
    locations: Optional[TemplateLocationsV1] = None
    cardExpiry: Optional[TemplateCardExpiryV1] = None
    links: Optional[List[TemplateLinkV1]] = Field(None, description='Template Links')
    dataFields: Optional[List[TemplateDataFieldV1]] = Field(
        None, description='Data Fields of the template'
    )
    certificates: Optional[TemplateCertificatesV1] = None
    actions: Optional[TemplateActionsV1] = None
    rateLimit: Optional[RateLimitV1] = None
    appLinking: Optional[TemplateAppLinking] = None
    shopifySettings: Optional[ShopfifySettings] = None
    notifications: Optional[List[NotificationSettings]] = None
    tiers: Optional[Dict[str, TierTemplateSettings]] = Field(
        None, description='Multi tiers Settings'
    )


class CreateTemplateV1(BaseModel):
    name: str = Field(..., description='Human readable name of the template', example='Bronze Card')
    cardCount: Optional[int] = Field(
        None, description='Number of active cards created using this template', example=80
    )
    downloadsCount: Optional[int] = Field(
        None, description='Number of cards downloaded', example=70
    )
    downloadedApplePassCount: Optional[int] = Field(
        None, description='Number of cards downloaded on Apple Wallet', example=50
    )
    downloadedGooglePassCount: Optional[int] = Field(
        None, description='Number of cards downloaded on Google Wallet', example=20
    )
    description: str = Field(
        ..., description='Template Description', example='LiteCard Bronze Card'
    )
    businessName: str = Field(..., description='Name of the business', example='LiteCard')
    isInternal: Optional[bool] = Field(
        None, description='Public Visibility of the template/form', example=False
    )
    type: Optional[Type1] = Field(None, description='The Type of Pass')
    externalId: Optional[str] = Field(
        None, description='External id mapping to third party system', example='1234'
    )
    settings: Optional[SettingsV1] = None
    stripeSettings: Optional[StripeSettings] = None
    appleWalletSettings: TemplateAppleWalletSettingsV1
    googleWalletSettings: TemplateGoogleWalletSettingsV1
    samsungWalletSettings: Optional[TemplateSamsungWalletSettingsV1] = None
    colours: Colours = Field(..., description='Colours of the template')
    images: Images = Field(..., description='Images of the template')
    barcode: Barcode = Field(..., description='Barcode Fields of the template')
    locations: Optional[TemplateLocationsV1] = None
    cardExpiry: Optional[TemplateCardExpiryV1] = None
    links: Optional[List[TemplateLinkV1]] = Field(None, description='Template Links')
    dataFields: Optional[List[TemplateDataFieldV1]] = Field(
        None, description='Data Fields of the template'
    )
    certificates: Optional[TemplateCertificatesV1] = None
    actions: Optional[TemplateActionsV1] = None
    rateLimit: Optional[RateLimitV1] = None
    appLinking: Optional[TemplateAppLinking] = None
    shopifySettings: Optional[ShopfifySettings] = None
    notifications: Optional[List[NotificationSettings]] = None
    tiers: Optional[Dict[str, TierTemplateSettings]] = Field(
        None, description='Multi tiers Settings'
    )


class TemplateV1(BaseTemplateV1, DatabaseMetaData):
    id: str = Field(..., description='Template ID', example='V1StGXR8_Z5jdHi6B-myT')
    formId: str = Field(..., description='Id for field input form', example='V1StGXR8_Z5jdHi6B-myT')
    version: float = Field(..., description='Schema Version used by the template')
    businessId: str = Field(
        ..., description='Identifies the owner of the record', example='R9xh12dga8i'
    )
    status: Status10 = Field(..., description='Template Status')
    name: str = Field(..., description='Human readable name of the template', example='Bronze Card')
    description: str = Field(
        ..., description='Template Description', example='LiteCard Bronze Card'
    )
    businessName: str = Field(..., description='Name of the business', example='LiteCard')
    appleWalletSettings: TemplateAppleWalletSettingsV1
    googleWalletSettings: TemplateGoogleWalletSettingsV1
    colours: TemplateColoursV1
    images: TemplateImagesV1
    barcode: TemplateBarcodeV1
    createdAt: str = Field(
        ..., description='Record creation date', example='2021-08-11T03:15:56.860Z'
    )
    updatedAt: str = Field(..., description='Record update date', example='2021-08-1T03:15:56.860Z')


class UpdateTemplateV1(BaseTemplateV1):
    id: str = Field(..., description='Template ID', example='V1StGXR8_Z5jdHi6B-myT')
    status: Optional[Status10] = Field(None, description='Template Status')
    updateExistingCards: Optional[bool] = Field(
        None, description='If true, will get all active cards and update them to match'
    )
    name: str = Field(..., description='Human readable name of the template', example='Bronze Card')
    description: str = Field(
        ..., description='Template Description', example='LiteCard Bronze Card'
    )
    businessName: str = Field(..., description='Name of the business', example='LiteCard')
    appleWalletSettings: TemplateAppleWalletSettingsV1
    googleWalletSettings: TemplateGoogleWalletSettingsV1
    colours: TemplateColoursV1
    images: TemplateImagesV1
    barcode: TemplateBarcodeV1


class CreatePassTemplateRequestBody(BaseModel):
    class Config:
        extra = Extra.forbid

    templatePayload: CreateTemplateV1
    cardPayload: BaseCardPayload
    options: Optional[SignUpOptions] = None


class ListTemplates(BaseModel):
    __root__: List[Template] = Field(..., description='List Templates Schema')


class ListTemplatesV1(BaseModel):
    __root__: List[TemplateV1]
